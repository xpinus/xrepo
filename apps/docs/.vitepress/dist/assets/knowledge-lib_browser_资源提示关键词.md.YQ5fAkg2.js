import{a3 as i,t,ao as a,q as l}from"./chunks/framework.Dt9YBBJv.js";const c=JSON.parse('{"title":"资源提示关键词","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge-lib/browser/资源提示关键词.md","filePath":"knowledge-lib/browser/资源提示关键词.md"}'),e={name:"knowledge-lib/browser/资源提示关键词.md"};function h(p,s,n,k,r,d){return l(),t("div",null,s[0]||(s[0]=[a('<h1 id="资源提示关键词" tabindex="-1">资源提示关键词 <a class="header-anchor" href="#资源提示关键词" aria-label="Permalink to &quot;资源提示关键词&quot;">​</a></h1><blockquote><p>preload vs. defer/async vs. prefetch</p></blockquote><ol><li>preload: 用来提前加载页面需要的关键资源（如 CSS、JavaScript、图片、字体等）。它不会影响资源的执行顺序，只是让浏览器尽早地加载这些资源。适用于必须尽早加载并在页面加载中立即使用的资源。</li></ol><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;preload&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;important-script.js&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;script&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ol start="2"><li>defer: 是用于 <code>&lt;script&gt;</code> 标签中，表示脚本会在 HTML 解析完成后执行。它不会阻塞页面的渲染，因此提高了页面的加载速度。适用于需要在页面加载完成后再执行的脚本。</li></ol><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;script.js&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ol start="3"><li>async: 属性也用于 <code>&lt;script&gt;</code> 标签中，表示脚本会异步加载和执行，不会阻塞页面的渲染。不同的是，async 的脚本会在下载完成后立即执行，这可能会打乱执行顺序，因此不适用于需要按顺序执行的脚本。</li></ol><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;script.js&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ol start="4"><li>prefetch: 用于告诉浏览器预加载页面未来可能需要的资源。它的作用是提前为未来的页面或内容做好准备，通常用于用户即将访问的页面资源。它与 preload 不同的是，prefetch 资源的优先级较低，通常在空闲时加载。</li></ol><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;prefetch&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;next-page.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><code>rel=&#39;dns-prefetch&#39;</code> 用于告诉浏览器预加载 DNS 解析的结果。它的作用是提前为未来的域名做好准备，通常用于用户即将访问的域名资源。</p><ol start="5"><li>prerender：类似prefetch但它会在后台渲染整个页面</li><li>preconnect：用于告诉浏览器预连接到未来可能需要的资源。预先建立链接（节约DNS/TCL/TLS的时间）</li></ol>',12)]))}const E=i(e,[["render",h]]);export{c as __pageData,E as default};
