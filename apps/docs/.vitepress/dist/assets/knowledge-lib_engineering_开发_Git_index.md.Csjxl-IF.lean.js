import{a2 as s,t as a,ao as t,q as l}from"./chunks/framework.tQiMsDJj.js";const e="/assets/reset.BpOdC3-y.png",n="/assets/git_merge.Bk6wI6uo.png",h="/assets/git_rebase.D--RU1Ej.png",y=JSON.parse('{"title":"Git","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge-lib/engineering/开发/Git/index.md","filePath":"knowledge-lib/engineering/开发/Git/index.md"}'),p={name:"knowledge-lib/engineering/开发/Git/index.md"};function k(r,i,g,d,o,F){return l(),a("div",null,i[0]||(i[0]=[t(`<h1 id="git" tabindex="-1">Git <a class="header-anchor" href="#git" aria-label="Permalink to &quot;Git&quot;">​</a></h1><h2 id="初始提交" tabindex="-1">初始提交 <a class="header-anchor" href="#初始提交" aria-label="Permalink to &quot;初始提交&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># …or create a new repository on the command line</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;# xrepo&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> README.md</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> README.md</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;first commit&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -M</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/xpinus/xrepo.git</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># …or push an existing repository from the command line</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/xpinus/xrepo.git</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -M</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span></span></code></pre></div><h2 id="tag" tabindex="-1">tag <a class="header-anchor" href="#tag" aria-label="Permalink to &quot;tag&quot;">​</a></h2><ul><li>列出标签</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 在控制台打印出当前仓库的所有标签</span></span></code></pre></div><ul><li>搜索标签</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ‘v0.1.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">’</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 搜索符合模式的标签</span></span></code></pre></div><ul><li>推送标签到远程仓库</li></ul><blockquote><p>git push并不会把tag标签传送到远端服务器上，只有通过显式命令才能分享标签到远端仓库</p></blockquote><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># push单个tag</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v1.0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #将本地v1.0的tag推送到远端服务器</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># push所有tag</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [origin] --tags</span></span></code></pre></div><h2 id="git-提交-文件名大小写的修改提交不上去" tabindex="-1">git 提交，文件名大小写的修改提交不上去 <a class="header-anchor" href="#git-提交-文件名大小写的修改提交不上去" aria-label="Permalink to &quot;git 提交，文件名大小写的修改提交不上去&quot;">​</a></h2><p><a href="https://blog.csdn.net/weixin_44137575/article/details/112801991" target="_blank" rel="noreferrer">https://blog.csdn.net/weixin_44137575/article/details/112801991</a></p><h2 id="git错误fatal-unable-to-access" tabindex="-1">git错误<code>fatal: unable to access</code> <a class="header-anchor" href="#git错误fatal-unable-to-access" aria-label="Permalink to &quot;git错误\`fatal: unable to access\`&quot;">​</a></h2><ol><li>检查网络连接</li><li>检查代理设置</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http.proxy</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https.proxy</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果代理设置不正确，你可以使用以下命令设置正确的代理（以HTTP代理为例）：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http.proxy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://127.0.0.1:7890</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https.proxy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://127.0.0.1:7890</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果你不需要使用代理，可以使用以下命令取消代理设置：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --unset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http.proxy</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --unset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https.proxy</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># https://developer.baidu.com/article/details/3291153</span></span></code></pre></div><h2 id="git回滚操作" tabindex="-1">git回滚操作 <a class="header-anchor" href="#git回滚操作" aria-label="Permalink to &quot;git回滚操作&quot;">​</a></h2><table tabindex="0"><thead><tr><th>命令</th><th>特点</th><th>应用</th></tr></thead><tbody><tr><td><code>git revert commit</code></td><td>保留工作区、保留历史提交记录、安全性高</td><td>可用于撤销产品暂时不想要的功能,并且想要保留之后的提交的功能、生产环境中因新增内容产生严重bug时,也可以用此功能来进行稳定回滚</td></tr><tr><td><code>git reset --hard commit</code></td><td>清空工作、暂存区、删除历史提交记、稳定性低</td><td>可用于删除掉一些低效提交的代码,净化提交记录、因为会清空提交记录,这里不太建议使用(最好不要过度依赖reflog</td></tr><tr><td><code>git checkout coomit -b &lt;new_branch&gt;</code></td><td>保留工作区、暂存区、保留历史提交记录、安摘取功能点、新分支、新分支中无污染(只保留摘取功能点之前的提交记录)、安全性高</td><td>可以用于摘取功能点,如产品说要上新需求时,单独上某一个需求,但是当前分支已经提交了很多功能点,此时我们就可以用该命令单独拎出产品需要的功能进行单独发布</td></tr></tbody></table><h2 id="rebase-与-merge-的区别" tabindex="-1">rebase 与 merge 的区别? <a class="header-anchor" href="#rebase-与-merge-的区别" aria-label="Permalink to &quot;rebase 与 merge 的区别?&quot;">​</a></h2><p>git rebase 和 git merge 一样都是用于从一个分支获取并且合并到当前分支.</p><p>假设一个场景,就是我们开发的[feature/todo]分支要合并到 master 主分支,那么用 rebase 或者 merge 有什么不同呢?</p><p>marge 特点：自动创建一个新的 commit 如果合并的时候遇到冲突，仅需要修改 后重新 commit</p><ul><li>优点：记录了真实的 commit 情况，包括每个分支的详情</li><li>缺点：因为每次 merge 会自动产生一个 merge commit，所以在使用一些 git 的 GUI tools，特别是 commit 比较频繁时，看到分支很杂乱。</li></ul><p>rebase 特点：会合并之前的 commit 历史</p><ul><li>优点：得到更简洁的项目历史，去掉了 merge commit</li><li>缺点：如果合并出现代码问题不容易定位，因为 re-write 了 history</li></ul><p>因此,当需要保留详细的合并信息的时候建议使用 git merge，特别是需要将分支合并 进入 master 分支时；当发现自己修改某个功能时，频繁进行了 git commit 提交时， 发现其实过多的提交信息没有必要时，可以尝试 git rebase</p><h2 id="git-reset、git-revert-和-git-checkout-有什么区别" tabindex="-1">git reset、git revert 和 git checkout 有什么区别 <a class="header-anchor" href="#git-reset、git-revert-和-git-checkout-有什么区别" aria-label="Permalink to &quot;git reset、git revert 和 git checkout 有什么区别&quot;">​</a></h2><p>这个问题同样也需要先了解 git 仓库的三个组成部分：工作区（Working Directory）、 暂存区（Stage）和历史记录区（History）。</p><ul><li>工作区：在 git 管理下的正常目录都算是工作区，我们平时的编辑工 作都是在工作区完成</li><li>暂存区：临时区域。里面存放将要提交文件的快照</li><li>历史记录区：git commit 后的记录区三个区的转换关系以及转换所 使用的命令：</li></ul><p><img src="`+e+'" alt=""></p><p>git reset、git revert 和 git checkout 的共同点：用来撤销代码仓库中的某些更改。 不同点：</p><ul><li>从 commit 层面来说： <ul><li>git reset 可以将一个分支的末端指向之前的一个 commit。然后再 下次 git 执行垃圾回收的时候，会把这个 commit 之后的 commit 都扔掉。</li><li>git checkout 可以将 HEAD 移到一个新的分支，并更新工作目录。因为可能会覆盖本地的修改，所以执行这个指令之前，你需 要 stash 或者 commit 暂存区和工作区的更改。</li><li>git revert 和 git reset 的目的是一样的，但是做法不同，它会以创 建新的 commit 的方式来撤销 commit，这样能保留之前的 commit 历史，比较安全。另外，同样因为可能会覆盖本地的修改，所以执行 这个指令之前， 你需要 stash 或者 commit 暂存区和工作区的更改。</li></ul></li><li>从文件层面来说： <ul><li>git reset 只是把文件从历史记录区拿到暂存区，不影响工作区的内容</li><li>git checkout 则是把文件从历史记录拿到工作区，不影响暂存区的内容</li><li>git revert 不支持文件层面的操作</li></ul></li></ul><h2 id="git-pull和git-pull-rebase的使用" tabindex="-1">git pull和git pull --rebase的使用 <a class="header-anchor" href="#git-pull和git-pull-rebase的使用" aria-label="Permalink to &quot;git pull和git pull --rebase的使用&quot;">​</a></h2><p>当多人开发时，遇到别人先提交，你再提交导致冲突的情况</p><p>用git pull命令把&quot;origin&quot;分支上的修改pull下来与本地提交合并（merge）成版本M，但这样会形成图中的菱形，让人很困惑 <img src="'+n+'" alt=""></p><p>git rebase <img src="'+h+`" alt=""></p><h2 id="清除git本地已删除远程文件夹" tabindex="-1">清除Git本地已删除远程文件夹 <a class="header-anchor" href="#清除git本地已删除远程文件夹" aria-label="Permalink to &quot;清除Git本地已删除远程文件夹&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fetch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --prune</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 确保本地仓库与远程同步</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clean</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -fd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -f：强制删除未跟踪的文件。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -d：同时删除未跟踪的文件夹。</span></span></code></pre></div>`,38)]))}const u=s(p,[["render",k]]);export{y as __pageData,u as default};
