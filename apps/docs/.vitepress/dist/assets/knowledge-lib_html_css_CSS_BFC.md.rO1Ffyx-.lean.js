import{a3 as o,t as e,ao as i,q as c}from"./chunks/framework.Dt9YBBJv.js";const m=JSON.parse('{"title":"BFC","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge-lib/html&css/CSS/BFC.md","filePath":"knowledge-lib/html&css/CSS/BFC.md"}'),d={name:"knowledge-lib/html&css/CSS/BFC.md"};function t(a,l,n,r,s,u){return c(),e("div",null,l[0]||(l[0]=[i('<h1 id="bfc" tabindex="-1">BFC <a class="header-anchor" href="#bfc" aria-label="Permalink to &quot;BFC&quot;">​</a></h1><blockquote><p>block formatting context 块级格式化上下文。形成一个独立的渲染区域，让处于 BFC 内部的元素与外部的元素相互隔离，使内外元素的布局不会相互影响</p></blockquote><blockquote><p>介绍下BFC及其应用</p></blockquote><ul><li><strong>触发条件</strong>（任意一条）： <ul><li>浮动元素----<code>float</code>的值不为<code>none</code></li><li>块级元素----<code>display</code>的值为<code>table-cell</code>，<code>table-caption</code>或<code>inline-block</code></li><li><code>overflow</code>的值不为<code>visible</code></li><li>绝对定位元素---<code>position</code>的值<code>ablsolute</code>或<code>fixed</code></li><li><code>flex</code>元素</li><li><code>IE</code>中，<code>Layout</code>，可通过<code>zoom: 1</code>触发</li></ul></li><li>与普通文档流的<strong>区别</strong>： <ul><li>普通文档流： <ul><li>浮动的元素不会被父级计算高度</li><li>非浮动元素会覆盖浮动元素的位置</li><li><code>margin</code>会传递给父级元素</li><li>两个相邻元素的上下<code>margin</code>会重叠</li></ul></li><li>BFC 布局规则： <ul><li>不与浮动元素重叠 <ul><li>浮动的元素会被父级计算高度（父级元素触发了<code>BFC</code>），解决浮动元素父元素高度坍塌的问题</li><li>非浮动元素不会覆盖浮动元素的位置（非浮动元素触发了<code>BFC</code>）</li></ul></li><li>为防止 A、B 的 margin 重叠给 A 添加一个包裹器 wrap，让 wrap 触发 BFC，从而让 A\\B 的 margin 同时起作用 <ul><li><code>margin</code>不会传递给父级（父级触发<code>BFC</code>）</li><li>属于同一个<code>BFC</code>的两个相邻元素上下<code>margin</code>会重叠</li><li>两个 BFC 之间的 margin 也会重叠</li></ul></li></ul></li></ul></li><li>开发中的<strong>应用</strong>： <ul><li>阻止<code>margin</code>重叠</li><li>可以包含浮动元素 —— 清除内部浮动(清除浮动的原理是两个 <code>div</code>都位于同一个 <code>BFC</code> 区域之中)</li><li>自适应两栏布局：右侧浮动w200，左侧（清除浮动）100%-200px</li><li>可以阻止元素被浮动元素覆盖</li></ul></li></ul><blockquote><p>各种FC</p></blockquote><ul><li>IFC： Inline Format Context 行内格式化上下文，一块区域以行内元素的形式来格式化</li><li>GFC： Grid Format Context 网格格式化上下文</li><li>FFC： Flex Format Context 弹性格式化上下文</li></ul>',6)]))}const F=o(d,[["render",t]]);export{m as __pageData,F as default};
