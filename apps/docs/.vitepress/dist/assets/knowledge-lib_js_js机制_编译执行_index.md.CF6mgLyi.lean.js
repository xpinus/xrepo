import{a2 as s,t as l,aq as a,q as t}from"./chunks/framework.jAttmLhR.js";const c=JSON.parse('{"title":"js机制-编译与执行","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge-lib/js/js机制/编译执行/index.md","filePath":"knowledge-lib/js/js机制/编译执行/index.md"}'),n={name:"knowledge-lib/js/js机制/编译执行/index.md"};function e(p,i,h,r,o,k){return t(),l("div",null,i[0]||(i[0]=[a(`<h1 id="js机制-编译与执行" tabindex="-1">js机制-编译与执行 <a class="header-anchor" href="#js机制-编译与执行" aria-label="Permalink to &quot;js机制-编译与执行&quot;">​</a></h1><p>我们知道 JavaScript 属于解释型语言，JavaScript 的执行分为：解释和执行两个阶段，这两个阶段所做的事并不一样。</p><p>解释阶段</p><ul><li>词法分析</li><li>语法分析</li><li>作用域规则确定</li></ul><p>执行阶段</p><ul><li>创建执行上下文</li><li>执行函数代码</li><li>垃圾回收</li></ul><h2 id="执行栈和执行上下文" tabindex="-1">执行栈和执行上下文 <a class="header-anchor" href="#执行栈和执行上下文" aria-label="Permalink to &quot;执行栈和执行上下文&quot;">​</a></h2><h3 id="执行上下文" tabindex="-1">执行上下文 <a class="header-anchor" href="#执行上下文" aria-label="Permalink to &quot;执行上下文&quot;">​</a></h3><blockquote><p>面试题：什么是执行上下文? 谈谈你对 JavaScript 执行上下文栈理解</p></blockquote><p>执行上下文(Execution Context)就是<strong>代码执行前进行的准备工作</strong></p><p>当js执行时，当进入到一个环境，就会创建一个执行上下文</p><p><strong>js中的执行环境与执行上下文</strong></p><ul><li>全局环境 -- 全局执行上下文</li><li>函数环境 -- 函数执行上下文</li><li>eval环境 -- eval执行上下文 <ul><li>安全问题，性能问题，限制引擎优化</li></ul></li></ul><p><strong>执行上下文的生命周期</strong></p><ul><li>创建阶段：函数被调用时，进入函数环境，创建一个函数上下文 <ul><li>函数环境会<strong>创建变量对象</strong><code>VO, Variable Object</code><ul><li>arguments 对象（并赋值）</li><li>函数声明（并赋值）</li><li>变量声明，变量表达式声明（<strong>不赋值</strong>）</li></ul></li><li><strong>确定 this 指向</strong>（由调用者决定）</li><li><strong>确定作用域</strong></li></ul></li><li>执行阶段：变量赋值、函数表达式赋值</li></ul><p>组成：</p><ul><li>变量环境（Variable Environment）：包含所有变量和函数声明的一个环境。与词法环境类似。</li><li>词法环境（Lexical Environment）：包括变量、函数以及执行上下文的外部环境。在 ES6 中，词法环境不仅包含了变量和函数，还涉及到 let、const 等块级作用域的处理。 <ul><li>词法环境包括了当前作用域内的所有变量和函数的定义。</li><li>它还包含一个指向外部词法环境的引用（也就是作用域链的实现）。</li></ul></li></ul><p><a href="https://gitee.com/dev-edu/frontend-interview-javascript/blob/master/07.%20%E6%89%A7%E8%A1%8C%E6%A0%88%E5%92%8C%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87/%E6%89%A7%E8%A1%8C%E6%A0%88%E5%92%8C%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87.md" target="_blank" rel="noreferrer">参考</a></p><h3 id="执行栈" tabindex="-1">执行栈 <a class="header-anchor" href="#执行栈" aria-label="Permalink to &quot;执行栈&quot;">​</a></h3><blockquote><p>js用来管理不同执行上下文的方式</p></blockquote><ul><li>执行栈：先进后出</li><li>栈底永远是全局执行上下文，栈顶永远是正在执行函数的执行上下文</li><li>当进入一个执行环境，就会创建出它的执行上下文，然后进行压栈</li><li>数量限制：没有具体限制，但当栈溢出时会报错<code>maxmum call stack exceeded</code></li></ul><h2 id="作用域和作用域链" tabindex="-1">作用域和作用域链 <a class="header-anchor" href="#作用域和作用域链" aria-label="Permalink to &quot;作用域和作用域链&quot;">​</a></h2><ul><li>规定变量和函数的可访问性的范围称作<strong>作用域</strong><ul><li>全局作用域：在代码任何位置都能访问到</li><li>函数作用域：函数内部</li><li>块级作用域，es6新增</li></ul></li><li>查找变量或者函数时，需要从局部作用域到全局作用域依次查找，这些作用域的集合称作<strong>作用域链</strong><ul><li>自由变量的取值: <strong>创建时</strong>作用域链中最靠近的那个变量的取值</li></ul></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> food</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;rice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> eat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`eat \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">food</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> food</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;noodle&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    eat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// eat rice</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})();</span></span></code></pre></div><blockquote><p>面试题：什么是作用域</p></blockquote><p>ES5 中只存在两种作用域：全局作用域和函数作用域。</p><p>在 JavaScript 中，我们将作用域定义为一套规则，这套规则用来管理引擎如何在当前作用域以及嵌套子作用域中根据标识符名称进行变量（变量名或者函数名）查找。ES6 新增了块级作用域。</p><blockquote><p>面试题：什么是作用域链 ？</p></blockquote><p>当访问一个变量时，编译器在执行这段代码时，会首先从当前的作用域中查找是否有这个标识符，如果没有找到，就会去父作用域查找，如果父作用域还没找到继续向上查找，直到全局作用域为止。</p><p>而作用域链，就是有当前作用域与上层作用域的一系列变量对象组成，它保证了当前执行的作用域对符合访问权限的变量和函数的有序访问。</p><p>作用域链有一个非常重要的特性，那就是作用域中的值是在函数创建的时候，就已经被存储了，是静态的。</p><p>所谓静态，就是说作用域中的值一旦被确定了，永远不会变。**函数可以永远不被调用，但是作用域中的值在函数创建的时候就已经被写入了，**并且存储在函数作用域链对象里面。</p><blockquote><p>作用域与执行上下文的区别</p></blockquote><p>JavaScript 解释阶段便会确定作用域规则，因此作用域在函数定义时就已经确定了，而不是在函数调用时确定，但是执行上下文是函数执行之前创建的。</p><p>执行上下文最明显的就是 this 的指向是执行时确定的。而作用域访问的变量是编写代码的结构确定的。</p><p><strong>执行上下文在运行时确定，随时可能改变，作用域在定义时就确定，并且不会改变</strong></p><h2 id="变量提升和预编译" tabindex="-1">变量提升和预编译 <a class="header-anchor" href="#变量提升和预编译" aria-label="Permalink to &quot;变量提升和预编译&quot;">​</a></h2><p>JS属于解释型语言，在执行过程中顺序执行，但是会分块先预编译然后才执行。因此在JS中存在一种变量提升的现象。</p><ul><li>对于一个let声明的变量，它的创建会被提升，但是初始化和赋值不会被提升。</li><li>对于一个var声明的变量，它的创建和初始化会被提升，赋值不会被提升。</li><li>对于一个函数，它的创建，初始化和赋值在同一时间都被提升</li></ul><blockquote><p>变量和函数怎么进行提升的？优先级是怎么样的？</p></blockquote><ul><li>对所有函数声明进行提升（除了函数表达式和箭头函数）</li><li>引用类型的赋值</li><li>开辟堆空间</li><li>存储内容</li><li>将地址赋给变量</li><li>对变量进行提升，只声明，不赋值，值为 undefined</li></ul><p><a href="https://juejin.cn/post/6844903575571677198" target="_blank" rel="noreferrer">https://juejin.cn/post/6844903575571677198</a></p>`,42)]))}const u=s(n,[["render",e]]);export{c as __pageData,u as default};
