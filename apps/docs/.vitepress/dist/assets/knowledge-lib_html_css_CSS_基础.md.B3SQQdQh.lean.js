import{a2 as s,t as a,ao as l,q as e}from"./chunks/framework.tQiMsDJj.js";const k=JSON.parse('{"title":"CSS","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge-lib/html&css/CSS/基础.md","filePath":"knowledge-lib/html&css/CSS/基础.md"}'),o={name:"knowledge-lib/html&css/CSS/基础.md"};function n(t,i,d,c,p,h){return e(),a("div",null,i[0]||(i[0]=[l(`<h1 id="css" tabindex="-1">CSS <a class="header-anchor" href="#css" aria-label="Permalink to &quot;CSS&quot;">​</a></h1><h2 id="css3-有哪些新特性" tabindex="-1">css3 有哪些新特性 <a class="header-anchor" href="#css3-有哪些新特性" aria-label="Permalink to &quot;css3 有哪些新特性&quot;">​</a></h2><ul><li>弹性盒模型 <code>display: flex;</code></li><li>多列布局 <code>column-count: 5;</code></li><li>媒体查询 <code>@media (max-width: 480px) {.box: {column-count: 1;}}</code></li><li>个性化字体 <code>@font-face{font-family: BorderWeb; src:url(BORDERW0.eot);}</code></li><li>颜色透明度 <code>color: rgba(255, 0, 0, 0.75);</code></li><li>圆角 <code>border-radius: 5px;</code></li><li>渐变 <code>background:linear-gradient(red, green, blue);</code></li><li>阴影 <code>box-shadow:3px 3px 3px rgba(0, 64, 128, 0.3);</code></li><li>倒影 <code>box-reflect: below 2px;</code></li><li>文字装饰 <code>text-stroke-color: red;</code></li><li>文字溢出 <code>text-overflow:ellipsis;</code></li><li>背景效果 <code>background-size: 100px 100px;</code></li><li>边框效果 <code>border-image:url(bt_blue.png) 0 10;</code></li><li>转换 <ul><li>旋转 <code>transform: rotate(20deg);</code></li><li>倾斜 <code>transform: skew(150deg, -10deg);</code></li><li>位移 <code>transform: translate(20px, 20px);</code></li><li>缩放 <code>transform: scale(.5);</code></li></ul></li><li>平滑过渡 <code>transition: all .3s ease-in .1s;</code></li><li>动画 <code>@keyframes anim-1 {50% {border-radius: 50%;}} animation: anim-1 1s;</code></li></ul><p><strong>CSS3 新增伪类（ : ）有那些？</strong></p><ul><li><code>p:first-of-type</code> 选择属于其父元素的首个<code>&lt;p&gt;</code>元素的每个<code>&lt;p&gt;</code> 元素。</li><li><code>p:last-of-type</code> 选择属于其父元素的最后 <code>&lt;p&gt;</code> 元素的每个<code>&lt;p&gt;</code> 元素。</li><li><code>p:only-of-type</code> 选择属于其父元素唯一的 <code>&lt;p&gt;</code>元素的每个 <code>&lt;p&gt;</code> 元素。</li><li><code>p:only-child</code> 选择属于其父元素的唯一子元素的每个 <code>&lt;p&gt;</code> 元素。</li><li><code>p:nth-child(2)</code> 选择属于其父元素的第二个子元素的每个 <code>&lt;p&gt;</code> 元素, <code>odd</code> <code>even</code>。</li><li><code>:after</code> 在元素之前添加内容,也可以用来做清除浮动。</li><li><code>:before</code> 在元素之后添加内容。</li><li><code>:enabled</code> 已启用的表单元素。</li><li><code>:disabled</code> 已禁用的表单元素。</li><li><code>:checked</code> 单选框或复选框被选中。</li></ul><h2 id="什么是-fouc" tabindex="-1">什么是 FOUC <a class="header-anchor" href="#什么是-fouc" aria-label="Permalink to &quot;什么是 FOUC&quot;">​</a></h2><ul><li><code>Flash of Unstyled Content</code>：在用户定义的样式表文件加载之前使用默认样式，加载用户样式后，造成页面闪烁</li><li><strong>解决</strong>：把样式表文件放到文档的<code>&lt;head&gt;</code></li></ul><h2 id="给行内元素设置-padding-和-margin-是否生效" tabindex="-1">给行内元素设置 padding 和 margin 是否生效？ <a class="header-anchor" href="#给行内元素设置-padding-和-margin-是否生效" aria-label="Permalink to &quot;给行内元素设置 padding 和 margin 是否生效？&quot;">​</a></h2><ul><li>块级元素的 padding 和 margin 值的设置都是有效的。</li><li>行内元素的 margin-left 和 margin-right 是有效的，margin-top 和 margin-bottom 并没有起作用。</li><li>padding 类似，但要注意 padding-top/bottom 会使得该元素的上下范围变大，但只是表象（实际没有作用），对周围的元素无影响。</li></ul><h2 id="display、float、position-的关系" tabindex="-1">display、float、position 的关系 <a class="header-anchor" href="#display、float、position-的关系" aria-label="Permalink to &quot;display、float、position 的关系&quot;">​</a></h2><ul><li>如果<code>display</code>取值为<code>none</code>，那么<code>position</code>和<code>float</code>都不起作用，这种情况下元素不产生框</li><li>否则，如果<code>position</code>取值为<code>absolute</code>或者<code>fixed</code>，框就是绝对定位的，<code>float</code>的计算值为<code>none</code>，<code>display</code>根据下面的表格进行调整。</li><li>否则，如果<code>float</code>不是<code>none</code>，框是浮动的，<code>display</code>根据下表进行调整</li><li>否则，如果元素是根元素，<code>display</code>根据下表进行调整</li><li>其他情况下<code>display</code>的值为指定值</li><li>总结起来：<strong>绝对定位、浮动、根元素都需要调整<code>display</code></strong></li></ul><h2 id="display-有哪些值-说明他们的作用" tabindex="-1">display 有哪些值？说明他们的作用 <a class="header-anchor" href="#display-有哪些值-说明他们的作用" aria-label="Permalink to &quot;display 有哪些值？说明他们的作用&quot;">​</a></h2><ul><li><code>block</code> 转换成块状元素。</li><li><code>inline</code> 转换成行内元素。</li><li><code>none</code> 设置元素不可见。</li><li><code>inline-block</code> 象行内元素一样显示，但其内容象块类型元素一样显示。元素的高度、宽度、行高以及顶和底边距都可设置。</li><li><code>list-item</code> 象块类型元素一样显示，并添加样式列表标记。</li><li><code>table</code> 此元素会作为块级表格来显示</li><li><code>inherit</code> 规定应该从父元素继承 <code>display</code> 属性的值</li></ul><h2 id="css3-动画-简单动画的实现-如旋转等" tabindex="-1">CSS3 动画（简单动画的实现，如旋转等） <a class="header-anchor" href="#css3-动画-简单动画的实现-如旋转等" aria-label="Permalink to &quot;CSS3 动画（简单动画的实现，如旋转等）&quot;">​</a></h2><ul><li><p>依靠<code>CSS3</code>中提出的三个属性：<code>transition</code>、<code>transform</code>、<code>animation</code></p></li><li><p><code>transition</code>：定义了元素在变化过程中是怎么样的，包含<code>transition-property</code>、<code>transition-duration</code>、<code>transition-timing-function</code>、<code>transition-delay</code>。</p></li><li><p><code>transform</code>：定义元素的变化结果，包含<code>rotate</code>、<code>scale</code>、<code>skew</code>、<code>translate</code>。</p></li><li><p><code>animation</code>：动画定义了动作的每一帧（<code>@keyframes</code>）有什么效果，包括<code>animation-name</code>，<code>animation-duration</code>、<code>animation-timing-function</code>、<code>animation-delay</code>、<code>animation-iteration-count</code>、<code>animation-direction</code></p></li><li><p>说一说 css3 的 animation</p></li><li><p>css3 的<code>animation</code>是 css3 新增的动画属性，这个 css3 动画的每一帧是通过<code>@keyframes</code>来声明的，<code>keyframes</code>声明了动画的名称，通过<code>from</code>、<code>to</code>或者是百分比来定义</p></li><li><p>每一帧动画元素的状态，通过<code>animation-name</code>来引用这个动画，同时 css3 动画也可以定义动画运行的时长、动画开始时间、动画播放方向、动画循环次数、动画播放的方式，</p></li><li><p>这些相关的动画子属性有：<code>animation-name</code>定义动画名、<code>animation-duration</code>定义动画播放的时长、<code>animation-delay</code>定义动画延迟播放的时间、<code>animation-direction</code>定义 动画的播放方向、<code>animation-iteration-count</code>定义播放次数、<code>animation-fill-mode</code>定义动画播放之后的状态、<code>animation-play-state</code>定义播放状态，如暂停运行等、<code>animation-timing-function</code></p></li><li><p>定义播放的方式，如恒速播放、艰涩播放等。</p></li></ul><p><strong>实践</strong></p><ul><li>CSS 实现沿Y轴旋转360度</li></ul><h2 id="display-inline-block中间间隙" tabindex="-1"><code>display: inline-block</code>中间间隙 <a class="header-anchor" href="#display-inline-block中间间隙" aria-label="Permalink to &quot;\`display: inline-block\`中间间隙&quot;">​</a></h2><ul><li><p>原因：<code>inline-block</code>元素间有空格或是换行，因此产生了间隙</p></li><li><p>如何消除：</p><ul><li><p>去除元素之间的空格或者换行，但会比较难看</p></li><li><p>空格符本质上就是个字符，设置<code>font-size: 0</code>，但在<code>chrome</code>下无效，在<code>IE6\\7</code>残留 1px 间隙</p></li><li><p><code>letter-spacing</code>字符边距属性可以控制文字间的水平距离的，支持负值，可以让文字水平方向上重叠，但 Opera 支持不好</p></li><li><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div></li></ul><p>.box { font-size: 0; letter-spacing: -3px; }</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>- \`margin-left\`</span></span>
<span class="line"><span></span></span>
<span class="line"><span>- 添加浮动，但还需要清除浮动的操作</span></span></code></pre></div></li></ul><h2 id="盒子模型" tabindex="-1">盒子模型 <a class="header-anchor" href="#盒子模型" aria-label="Permalink to &quot;盒子模型&quot;">​</a></h2><ul><li>构成：内容<code>content</code>，内边距<code>padding</code>，边框<code>border</code>，外边距<code>margin</code></li><li>种类： <ul><li>标准（W3C）盒模型 <ul><li>元素实际占据宽度<code>= width + padding + border +margin </code></li><li>通过设置<code>box-sizing: content-box</code>触发</li></ul></li><li>兼容（IE）盒模型 <ul><li>元素实际占据宽度<code>= width + margin</code></li><li>通过设置<code>box-sizing: border-box</code>触发</li></ul></li><li>设置通过设置<code>box-sizing: inherit</code>继承父元素的<code>box-sizing</code>设置</li></ul></li></ul><h2 id="opacity-和-rgba、transparent-的透明效果有什么不同" tabindex="-1">opacity 和 rgba、transparent 的透明效果有什么不同？ <a class="header-anchor" href="#opacity-和-rgba、transparent-的透明效果有什么不同" aria-label="Permalink to &quot;opacity 和 rgba、transparent 的透明效果有什么不同？&quot;">​</a></h2><ul><li>都能实现透明效果</li><li><code>opacity</code><ul><li>作为一个完整属性出现的</li><li>对于整个元素起作用的</li></ul></li><li><code>rgba</code>和<code>transparent</code><ul><li>作为属性值出现的</li><li>任何需要设置颜色的地方都可以根据情况使用<code>transparent</code>或<code>rgba</code>。比如背景、边框、字体等等。 <ul><li>哪个属性的颜色设置了 transparent，哪个属性就是透明的，完全透明。</li><li>哪个属性用 rgba()设置了透明，就对哪个属性起作用，透明程度可设置，从 0.0 （完全透明）到 1.0（完全不透明）。</li></ul></li></ul></li><li>由于<code>opacity</code>和<code>alpha</code>设置的透明程度可调，就引出一个继承的问题。如果一个元素未设置 opacity 属性，那么它会从它的父元素继承 opacity 属性的值。而 alpha 不存在继承。</li></ul><h2 id="什么是外边距重叠-重叠的结果是什么" tabindex="-1">什么是外边距重叠？重叠的结果是什么？ <a class="header-anchor" href="#什么是外边距重叠-重叠的结果是什么" aria-label="Permalink to &quot;什么是外边距重叠？重叠的结果是什么？&quot;">​</a></h2><blockquote><p>外边距重叠就是 margin-collapse</p></blockquote><ul><li>在 CSS 当中，相邻的两个盒子（可能是兄弟关系也可能是祖先关系）的外边距可以结合成一个单独的外边距。这种合并外边距的方式被称为折叠，并且因而所结合成的外边距称为折叠外边距。</li><li>只有垂直的会折叠</li></ul><ul><li><strong>折叠结果遵循下列计算规则</strong>： <ul><li>两个相邻的外边距都是正数时，折叠结果是它们两者之间较大的值。</li><li>两个相邻的外边距都是负数时，折叠结果是两者绝对值的较大值。</li><li>两个外边距一正一负时，折叠结果是两者的相加的和。</li></ul></li><li><strong>如何避免？</strong><ul><li><a href="https://blog.csdn.net/m0_48721669/article/details/121156239?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-9.opensearchhbase&amp;spm=1001.2101.3001.4242.6" target="_blank" rel="noreferrer">https://blog.csdn.net/m0_48721669/article/details/121156239?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-9.opensearchhbase&amp;spm=1001.2101.3001.4242.6</a></li><li><strong>2.<strong>创建了块级格式化上下文的元素，不和它的子元素发生 margin 折叠</strong>（注意这里指的是创建了 BFC 的元素和它的子元素不会发生折叠）</strong></li></ul></li></ul><h2 id="如何使用-css-实现硬件加速" tabindex="-1">如何使用 CSS 实现硬件加速？ <a class="header-anchor" href="#如何使用-css-实现硬件加速" aria-label="Permalink to &quot;如何使用 CSS 实现硬件加速？&quot;">​</a></h2><blockquote><p>硬件加速是指通过创建独立的复合图层，让 GPU 来渲染这个图层，从而提高性能，</p></blockquote><ul><li>一般触发硬件加速的<code>CSS</code>属性有<code>transform</code>、<code>opacity</code>、<code>filter</code>，为了避免 2D 动画在 开始和结束的时候的<code>repaint</code>操作，一般使用<code>tranform:translateZ(0)</code></li></ul><h2 id="如何实现小于-12px-的字体效果" tabindex="-1">如何实现小于 12px 的字体效果 <a class="header-anchor" href="#如何实现小于-12px-的字体效果" aria-label="Permalink to &quot;如何实现小于 12px 的字体效果&quot;">​</a></h2><blockquote><p><code>transform:scale()</code>这个属性只可以缩放可以定义宽高的元素，而行内元素是没有宽高的，我们可以加上一个<code>display:inline-block</code>;</p></blockquote><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>transform: scale(0.7);</span></span></code></pre></div><p><code>css</code>的属性，可以缩放大小</p><p>但以我目前的经验，在新版本的浏览器中已经可以设置小于12px的font-size</p><h2 id="css-sprite" tabindex="-1">css sprite <a class="header-anchor" href="#css-sprite" aria-label="Permalink to &quot;css sprite&quot;">​</a></h2><ul><li>精灵图，将多个小图片拼到一个大图中，通过<code>background-position</code>和元素尺寸调节显示想要的背景图</li><li>优点： <ul><li>减少 HTTP 请求次数，极大提高页面加载速度</li><li>增加图片信息重复度，提高压缩比，减少图片大小</li><li>网页整体更换风格方便，只要更改少量图片即可</li></ul></li><li>缺点： <ul><li>图片合并麻烦</li><li>维护麻烦，修改一个图片可能要重新布局整个图片样式</li></ul></li></ul><h2 id="css-hack-原理及常用-hack" tabindex="-1">css hack 原理及常用 hack <a class="header-anchor" href="#css-hack-原理及常用-hack" aria-label="Permalink to &quot;css hack 原理及常用 hack&quot;">​</a></h2><ul><li>原理：CSS hack 是通过在 CSS 样式中加入一些特殊的符号，让不同的浏览器识别不同的符号。利用不同浏览器对 CSS 的支持和解析结果不一样编写针对特定浏览器样式。</li><li><a href="https://www.w3cschool.cn/css/css-hack.html" target="_blank" rel="noreferrer">https://www.w3cschool.cn/css/css-hack.html</a></li><li>常见的 hack 有 <ul><li>属性 hack</li><li>选择器 hack</li><li>IE 条件注释</li></ul></li></ul><h2 id="css-有哪些继承属性" tabindex="-1">CSS 有哪些继承属性 <a class="header-anchor" href="#css-有哪些继承属性" aria-label="Permalink to &quot;CSS 有哪些继承属性&quot;">​</a></h2><ul><li><p>关于文字排版的属性如：</p><ul><li><p><code>font</code></p><ul><li><code>word-break</code> 单词换行规则</li><li><code>letter-spacing</code> 字符间距</li><li><code>text-align</code></li><li><code>text-rendering</code> 非标准，文字的渲染规则</li><li><code>word-spacing</code> 标签单词之间的间距</li><li><code>white-space</code> 对文本中空白和换行符的处理规则</li><li><code>text-indent</code> 段首缩进</li><li><code>text-transform</code> 转换文本，全部小写，大写开头之类</li><li><code>text-shadow</code> 文字阴影效果</li><li><code>text-overflow</code>多余文本的处理方式，省略符、裁剪之类</li></ul></li><li><p><code>line-height</code></p></li><li><p><code>color</code></p></li><li><p><code>visibility</code></p></li><li><p><code>cursor</code></p></li></ul></li></ul><p><strong>CSS 哪些属性可以继承？哪些属性不可以继承</strong></p><ul><li>可继承的样式： <code>font-size font-family color, UL LI DL DD DT</code></li><li>不可继承的样式：<code>border padding margin width height</code></li></ul><h2 id="css-选择符有哪些" tabindex="-1">css 选择符有哪些 <a class="header-anchor" href="#css-选择符有哪些" aria-label="Permalink to &quot;css 选择符有哪些&quot;">​</a></h2><ul><li>id 选择器（ <code>## myid</code>）</li><li>类选择器（<code>.myclassname</code>）</li><li>标签选择器（<code>div</code>, <code>h1</code>, <code>p</code>）</li><li>相邻选择器（<code>h1 + p</code>）</li><li>子选择器（<code>ul &gt; li</code>）</li><li>后代选择器（<code>li a</code>）</li><li>通配符选择器（ <code>*</code> ）</li><li>属性选择器（<code>input[type=&quot;text&quot;]</code>）</li><li>伪类选择器（<code>a:hover, li:nth-child</code>）</li></ul><h2 id="用纯-css-创建一个三角形的原理是什么" tabindex="-1">用纯 CSS 创建一个三角形的原理是什么 <a class="header-anchor" href="#用纯-css-创建一个三角形的原理是什么" aria-label="Permalink to &quot;用纯 CSS 创建一个三角形的原理是什么&quot;">​</a></h2><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 把上、左、右三条边隐藏掉（颜色设为 transparent） */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">#demo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	border-width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	border-style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">solid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	border-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">transparent</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> transparent</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> red</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> transparent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="css3-新增伪类有那些" tabindex="-1">CSS3 新增伪类有那些 <a class="header-anchor" href="#css3-新增伪类有那些" aria-label="Permalink to &quot;CSS3 新增伪类有那些&quot;">​</a></h2><ul><li><code>:root</code> 选择文档的根元素，等同于 html 元素</li><li><code>:empty</code> 选择没有子元素的元素</li><li><code>:target</code> 选取当前活动的目标元素</li><li><code>:not(selector)</code> 选择除 <code>selector</code> 元素意外的元素</li><li><code>:enabled</code> 选择可用的表单元素</li><li><code>:disabled</code> 选择禁用的表单元素</li><li><code>:checked</code> 选择被选中的表单元素</li><li><code>:after</code> 在元素内部最前添加内容</li><li><code>:before</code> 在元素内部最后添加内容</li><li><code>:nth-child(n)</code> 匹配父元素下指定子元素，在所有子元素中排序第 n （从1开始）</li><li><code>:nth-last-child(n)</code> 匹配父元素下指定子元素，在所有子元素中排序第 n，从后向前数</li><li><code>:nth-child(odd)</code></li><li><code>:nth-child(even)</code></li><li><code>:nth-child(3n+1)</code> n（从0开始）</li><li><code>:first-child</code></li><li><code>:last-child</code></li><li><code>:only-child</code></li><li><code>:nth-of-type(n)</code> 匹配父元素下指定子元素，在同类子元素中排序第 n</li><li><code>:nth-last-of-type(n)</code> 匹配父元素下指定子元素，在同类子元素中排序第 n，从后向前数</li><li><code>:nth-of-type(odd)</code></li><li><code>:nth-of-type(even)</code></li><li><code>:nth-of-type(3n+1)</code></li><li><code>:first-of-type</code></li><li><code>:last-of-type</code></li><li><code>:only-of-type</code></li><li><code>::selection</code> 选择被用户选取的元素部分</li><li><code>:first-line</code> 选择元素中的第一行</li><li><code>:first-letter</code> 选择元素中的第一个字符</li></ul><h3 id="伪元素和伪类的区别和作用" tabindex="-1">伪元素和伪类的区别和作用 <a class="header-anchor" href="#伪元素和伪类的区别和作用" aria-label="Permalink to &quot;伪元素和伪类的区别和作用&quot;">​</a></h3><ul><li>伪元素 -- 在内容元素的前后插入额外的元素或样式，但是这些元素实际上并不在文档中生成。</li><li>它们只在外部显示可见，但不会在文档的源代码中找到它们，因此，称为“伪”元素。例如：</li></ul><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">::before</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;第一章：&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">::after</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hot!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">::first-line</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">::first-letter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>伪类 -- 将特殊的效果添加到特定选择器上。它是已有元素上添加类别的，不会产生新的元素。例如：</li></ul><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:hover</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: #</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#ff00ff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:first-child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="padding和margin的百分比相对的对象" tabindex="-1">padding和margin的百分比相对的对象 <a class="header-anchor" href="#padding和margin的百分比相对的对象" aria-label="Permalink to &quot;padding和margin的百分比相对的对象&quot;">​</a></h2><p><code>父级元素的宽度</code></p><h2 id="背景色范围" tabindex="-1">背景色范围 <a class="header-anchor" href="#背景色范围" aria-label="Permalink to &quot;背景色范围&quot;">​</a></h2><div style="height:50px;width:fit-content;background-color:pink;padding:10px;border:5px solid #000;">背景色范围包含padding不包含border</div><h2 id="link和-import的区别" tabindex="-1">link和@import的区别 <a class="header-anchor" href="#link和-import的区别" aria-label="Permalink to &quot;link和@import的区别&quot;">​</a></h2><ul><li>link属于html标签，而@import时css的语法 <ul><li>link除了加载css之外，还可以做很多其它的事情</li><li>@import只能加载css文件</li></ul></li><li>加载顺序差别 <ul><li>@import加载css只有当当前css被下载解析之后才会加载</li><li>link加载css会并行下载，因此从性能优化的角度，应尽量避免使用@import</li></ul></li><li>兼容性差别，@import是在css2.1提出的标准，仅支持ie5+的浏览器</li><li>当使用js控制dom去改变样式的时候，只能使用link <ul><li>对于可换肤的网站而言，可以通过改变link的值来切换样式</li></ul></li></ul><h2 id="渐进式渲染" tabindex="-1">渐进式渲染 <a class="header-anchor" href="#渐进式渲染" aria-label="Permalink to &quot;渐进式渲染&quot;">​</a></h2><p>progresive rendering 是为了提高用户感知的加载速度</p><ul><li>骨架屏</li><li>图片懒加载</li><li>图片占位符</li><li>拆分网页资源</li></ul><h2 id="css渲染性能优化" tabindex="-1">css渲染性能优化 <a class="header-anchor" href="#css渲染性能优化" aria-label="Permalink to &quot;css渲染性能优化&quot;">​</a></h2><ul><li>id选择器非常高效</li><li>避免深层次的嵌套</li><li>不要使用属性选择器</li><li>值缩写</li><li>背景图优化</li></ul><h2 id="css3遮罩" tabindex="-1">css3遮罩 <a class="header-anchor" href="#css3遮罩" aria-label="Permalink to &quot;css3遮罩&quot;">​</a></h2><p>mask: 类似蒙版，透明的部分不显示，非透明，有图像的部分才能显示下面的内容，支持渐变</p><ul><li>mask-image;</li><li>mask-repeat</li><li>mask-size</li><li>...</li></ul><h2 id="滚动吸附" tabindex="-1">滚动吸附 <a class="header-anchor" href="#滚动吸附" aria-label="Permalink to &quot;滚动吸附&quot;">​</a></h2><p>滚动容器 scroll-snap-type: x mandatory; // x轴滚动吸附,不能存在中间状态</p><p>子元素 scroll-snap-align: start; // 吸附对齐方式 scroll-snap-stop: always; // 始终要停在下一个元素，不能一次滚动跳过多个</p><h2 id="使用-css-实现一个持续的动画效果" tabindex="-1">使用 css 实现一个持续的动画效果 <a class="header-anchor" href="#使用-css-实现一个持续的动画效果" aria-label="Permalink to &quot;使用 css 实现一个持续的动画效果&quot;">​</a></h2><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    animation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: mymove </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> infinite</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@keyframes</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> mymove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>animation-name</code> 规定需要绑定到选择器的 <code>keyframe</code>名称。</li><li><code>animation-duration</code> 规定完成动画所花费的时间，以秒或毫秒计。</li><li><code>animation-timing-function</code> 规定动画的速度曲线。</li><li><code>animation-delay</code> 规定在动画开始之前的延迟。</li><li><code>animation-iteration-count</code> 规定动画应该播放的次数。</li><li><code>animation-direction</code> 规定是否应该轮流反向播放动画</li></ul><h2 id="clip-path" tabindex="-1">clip-path <a class="header-anchor" href="#clip-path" aria-label="Permalink to &quot;clip-path&quot;">​</a></h2><p><a href="https://www.bilibili.com/video/BV1h6421Z7aA/?spm_id_from=333.1387.0.0&amp;vd_source=13577946ef3878abe2197cc65b72005c" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1h6421Z7aA/?spm_id_from=333.1387.0.0&amp;vd_source=13577946ef3878abe2197cc65b72005c</a></p><h2 id="houdini-api" tabindex="-1">Houdini API <a class="header-anchor" href="#houdini-api" aria-label="Permalink to &quot;Houdini API&quot;">​</a></h2><p><a href="https://www.bilibili.com/video/BV1Sw4m1Y7ec/?spm_id_from=333.1387.0.0&amp;vd_source=13577946ef3878abe2197cc65b72005c" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1Sw4m1Y7ec/?spm_id_from=333.1387.0.0&amp;vd_source=13577946ef3878abe2197cc65b72005c</a></p><p>允许开发者干预浏览器渲染的各个环节</p><p>自定义css属性</p>`,80)]))}const g=s(o,[["render",n]]);export{k as __pageData,g as default};
