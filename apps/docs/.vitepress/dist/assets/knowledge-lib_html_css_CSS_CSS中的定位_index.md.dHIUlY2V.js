import{a2 as e,t,ao as i,q as l}from"./chunks/framework.tQiMsDJj.js";const b=JSON.parse('{"title":"CSS中的定位","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge-lib/html&css/CSS/CSS中的定位/index.md","filePath":"knowledge-lib/html&css/CSS/CSS中的定位/index.md"}'),o={name:"knowledge-lib/html&css/CSS/CSS中的定位/index.md"};function r(s,a,n,d,c,h){return l(),t("div",null,a[0]||(a[0]=[i('<h1 id="css中的定位" tabindex="-1">CSS中的定位 <a class="header-anchor" href="#css中的定位" aria-label="Permalink to &quot;CSS中的定位&quot;">​</a></h1><h2 id="static-静态定位" tabindex="-1">static 静态定位 <a class="header-anchor" href="#static-静态定位" aria-label="Permalink to &quot;static 静态定位&quot;">​</a></h2><p>默认，就是标准流的排列，不受top,bottom,left,right的影响</p><h2 id="relative-相对定位" tabindex="-1">relative 相对定位 <a class="header-anchor" href="#relative-相对定位" aria-label="Permalink to &quot;relative 相对定位&quot;">​</a></h2><ul><li>相对于其正常所处位置进行定位</li><li>不脱离文档流</li><li>应用：子绝父相</li></ul><h2 id="absolute" tabindex="-1">absolute <a class="header-anchor" href="#absolute" aria-label="Permalink to &quot;absolute&quot;">​</a></h2><ul><li>相对于最近的具有定位的父元素进行定位 <ul><li>没有时，如果设置top, 则相对于**页面（不是浏览器窗口）**左上角定位</li><li>没有时，如果设置bottom，则相对于**浏览器窗口（首屏渲染页面，根滚动无关）**左下角，</li></ul></li><li>脱离文档流，触发 BFC</li><li>display属性会变成block</li></ul><h2 id="fixed" tabindex="-1">fixed <a class="header-anchor" href="#fixed" aria-label="Permalink to &quot;fixed&quot;">​</a></h2><ul><li>相对于浏览器窗口进行定位</li><li>脱离文档流，触发 BFC</li></ul><h2 id="sticky" tabindex="-1">sticky <a class="header-anchor" href="#sticky" aria-label="Permalink to &quot;sticky&quot;">​</a></h2><p>滚动区域下元素：position: stickey + top(阈值)</p>',11)]))}const m=e(o,[["render",r]]);export{b as __pageData,m as default};
