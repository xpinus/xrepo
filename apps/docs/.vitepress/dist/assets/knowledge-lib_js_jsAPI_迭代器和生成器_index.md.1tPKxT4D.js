import{a2 as a,t as e,aq as t,K as n,ab as l,q as p}from"./chunks/framework.jAttmLhR.js";const u=JSON.parse('{"title":"生成器和迭代器","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge-lib/js/jsAPI/迭代器和生成器/index.md","filePath":"knowledge-lib/js/jsAPI/迭代器和生成器/index.md"}'),h={name:"knowledge-lib/js/jsAPI/迭代器和生成器/index.md"};function k(r,s,d,o,c,E){const i=l("run-script");return p(),e("div",null,[s[0]||(s[0]=t(`<h1 id="生成器和迭代器" tabindex="-1">生成器和迭代器 <a class="header-anchor" href="#生成器和迭代器" aria-label="Permalink to &quot;生成器和迭代器&quot;">​</a></h1><ul><li>生成器是一个函数，用来返回迭代器的，当调用生成器后不会立即执行，而是通过返回的迭代器来控制这个生成器的一步一步执行的</li><li>调用迭代器的 next 方法来请求一个一个的值，返回的对象有两个属性，一个是 value，也就是值；另一个是 done，是个布尔类型，done 为 true 说明生成器函数执 行完毕，没有可返回的值了</li><li>每当执行到 yield 属性的时候，都会返回一个对象，这时候生成器处于一个非阻塞的挂起状态</li><li>调用迭代器的 next 方法的时候，生成器又从挂起状态改为执行状态，继续上一次的执 行位置执行</li></ul><blockquote><p>面试题: 让下列代码成立</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    b: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// error:  {(intermediate value)(intermediate value)} is not iterable</span></span></code></pre></div>`,4)),n(i,{codePath:"knowledge-lib/js/jsAPI/迭代器和生成器/src/f1.js"})])}const y=a(h,[["render",k]]);export{u as __pageData,y as default};
