import{a2 as o,t as a,aq as t,q as i}from"./chunks/framework.jAttmLhR.js";const k=JSON.parse('{"title":"离线存储技术","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge-lib/browser/离线存储技术.md","filePath":"knowledge-lib/browser/离线存储技术.md"}'),r={name:"knowledge-lib/browser/离线存储技术.md"};function l(s,e,d,n,c,h){return i(),a("div",null,e[0]||(e[0]=[t('<h1 id="离线存储技术" tabindex="-1">离线存储技术 <a class="header-anchor" href="#离线存储技术" aria-label="Permalink to &quot;离线存储技术&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#cookie">cookie</a><ul><li><a href="#session">session</a></li><li><a href="#cookie、sessionstorage、localstorage的区别">Cookie、sessionStorage、localStorage的区别</a></li></ul></li><li><a href="#web-storage">Web Storage</a><ul><li><a href="#localstorage">localstorage</a></li><li><a href="#sessionstorage">sessionStorage</a></li></ul></li><li><a href="#indexdb">indexDB</a></li><li><a href="#离线缓存-application-cache">离线缓存（Application Cache）</a></li><li><a href="#websql">WebSQL</a></li></ul></nav><h2 id="cookie" tabindex="-1">cookie <a class="header-anchor" href="#cookie" aria-label="Permalink to &quot;cookie&quot;">​</a></h2><blockquote><p>什么是cookie，有什么用</p></blockquote><p>HTTP Cookie（也叫 Web Cookie 或浏览器 Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上（<em>这意味着是会被保存在本地的</em>）。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie 使基于<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview#http_is_stateless_but_not_sessionless" target="_blank" rel="noreferrer">无状态</a>的 HTTP 协议记录稳定的状态信息成为了可能。</p><p>Cookie 主要用于以下三个方面：</p><ul><li>会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）</li><li>个性化设置（如用户自定义设置、主题等）</li><li>浏览器行为跟踪（如跟踪分析用户行为等）、</li></ul><p>Cookie 曾一度用于客户端数据的存储，因当时并没有其它合适的存储办法而作为唯一的存储手段，但现在随着现代浏览器开始支持各种各样的存储方式，Cookie 渐渐被淘汰。</p><p>由于服务器指定 Cookie 后，浏览器的每次请求都会携带 Cookie 数据，会带来额外的性能开销（尤其是在移动环境下）。新的浏览器 API 已经允许开发者直接将数据存储到本地，如使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Storage_API" target="_blank" rel="noreferrer">Web storage API</a> （本地存储和会话存储）或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API" target="_blank" rel="noreferrer">IndexedDB</a> 。</p><table tabindex="0"><thead><tr><th><strong>参数</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>Name</td><td>cookie的名称，一旦创建，不可更改</td></tr><tr><td>Value</td><td>cookie的值，若值为Unicode字符，需要为字符编码。若值为二进制数据，需要使用BASE64编码</td></tr><tr><td>Domain</td><td>可以访问cookie的域名。如设置为。liu.com，以liu.com结尾的域名都可以访问这个cookie</td></tr><tr><td>Path</td><td>cookie的使用路径，设置为/，则本禹铭下所有页面都可以访问这个cookie.</td></tr><tr><td>Expires/Max-Age</td><td>有效时间</td></tr><tr><td>Size</td><td>cookie的大小</td></tr><tr><td>HttpOnly</td><td>若此属性为true,则只会在HTTP头中有这个Cookie的信息，不能通过document.cookie来访问它</td></tr><tr><td>Secure</td><td>指定cookie是否仅被使用安全协议传输，默认为false</td></tr><tr><td>SameSite</td><td>用来限制第三方cookie,减少安全风险(防止CSRF攻击)</td></tr></tbody></table><blockquote><p>创建cookie</p></blockquote><p>当服务器收到 HTTP 请求时，服务器可以在响应头里面添加一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Set-Cookie" target="_blank" rel="noreferrer"><code>Set-Cookie</code></a> 选项。浏览器收到响应后通常会保存下 Cookie，之后对该服务器每一次请求中都通过 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cookie" target="_blank" rel="noreferrer"><code>Cookie</code></a> 请求头部将 Cookie 信息发送给服务器。另外，Cookie 的过期时间、域、路径、有效期、适用站点都可以根据需要来指定。</p><blockquote><p>cookie和token都存放在header中为什么token不会被劫持</p></blockquote><ol><li>xss攻击拿到cookie就可以伪造，相对而言，因为token的存放位置不确定，而且通过jwt+ip的方式验证，即使劫持也无效,但现在cookie可以设置httpOnly防止js写入，也许会刚安全，拿到也没用</li><li>csrf攻击成功后，利用浏览器自动携带cookie的特性，但token不会自动携带</li></ol><h3 id="session" tabindex="-1">session <a class="header-anchor" href="#session" aria-label="Permalink to &quot;session&quot;">​</a></h3><ul><li><p>session 是保存在服务端的</p></li><li><p>session 的运行依赖 sessionId，而 sessionId 又保存在 cookie 中，所以如果禁用的 cookie，session 也是不能用的，不过硬要用也可以，可以把 sessionId 保存在 URL 中</p></li><li><p>session 一般用来跟踪用户的状态 session 的安全性更高，保存在服务端，不过一般为使服务端性能更加，会考虑部分 信息保存在 cookie 中</p></li><li><p>浏览器如何对离线资源进行管理和加载的？</p></li></ul><ul><li>在线：浏览器发现html头部有<code>manifest</code>属性，它会请求该文件，如果是第一次访问，就会根据其内容下载资源进行离线存储；如果访问过，则会比较新旧<code>manifest</code>，更新离线资源</li><li>离线：浏览器直接使用离线存储的资源</li></ul><h3 id="cookie、sessionstorage、localstorage的区别" tabindex="-1">Cookie、sessionStorage、localStorage的区别 <a class="header-anchor" href="#cookie、sessionstorage、localstorage的区别" aria-label="Permalink to &quot;Cookie、sessionStorage、localStorage的区别&quot;">​</a></h3><p><img src="https://imagehost-1311720054.cos.ap-nanjing.myqcloud.com/blog/%E5%8D%9A%E5%AE%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/image-20220907225402914.png" alt="image-20220907225402914"></p><p>cookie与domain和path关联，而storage只与domain关联</p><h2 id="web-storage" tabindex="-1">Web Storage <a class="header-anchor" href="#web-storage" aria-label="Permalink to &quot;Web Storage&quot;">​</a></h2><h3 id="localstorage" tabindex="-1">localstorage <a class="header-anchor" href="#localstorage" aria-label="Permalink to &quot;localstorage&quot;">​</a></h3><p>生命周期：关闭浏览器后数据依然保留，除非手动清除，否则一直在</p><p>作用域：相同浏览器的不同标签在同源情况下可以共享 localStorage</p><h3 id="sessionstorage" tabindex="-1">sessionStorage <a class="header-anchor" href="#sessionstorage" aria-label="Permalink to &quot;sessionStorage&quot;">​</a></h3><p>生命周期：关闭浏览器或者标签后即失效</p><p>作用域：只在当前标签可用，当前标签的 iframe 中且同源可以共享</p><h2 id="indexdb" tabindex="-1">indexDB <a class="header-anchor" href="#indexdb" aria-label="Permalink to &quot;indexDB&quot;">​</a></h2><blockquote><p>IndexedDB 是一种底层 API，用于在客户端存储大量的结构化数据（也包括文件/二进制大型对象（blobs））, 像是一款NoSQL数据库</p></blockquote><ul><li>键值对存储</li><li>异步</li><li>事务</li><li>同源限制</li><li>储存空间大</li><li>支持二进制存储，ArrayBuffer和Blob</li></ul><p><a href="https://dexie.org/" target="_blank" rel="noreferrer">dexie.js</a></p><h2 id="离线缓存-application-cache" tabindex="-1"><s>离线缓存（Application Cache）</s> <a class="header-anchor" href="#离线缓存-application-cache" aria-label="Permalink to &quot;~~离线缓存（Application Cache）~~&quot;">​</a></h2><p>HTML5 引入离线缓存（Application Cache），这意味着 web 应用可进行缓存，并可在没有因特网连接时进行访问</p><p>通过创建<code>cache manifest</code>文件（.appcache），可以轻松的创建离线应用</p><p>已废弃，推荐 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API" target="_blank" rel="noreferrer">Service Worker</a></p><h2 id="websql" tabindex="-1">WebSQL <a class="header-anchor" href="#websql" aria-label="Permalink to &quot;WebSQL&quot;">​</a></h2><p>接近废弃，不是h5规范的一部分</p>',37)]))}const b=o(r,[["render",l]]);export{k as __pageData,b as default};
