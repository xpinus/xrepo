import{a3 as l,t as i,ao as a,q as o}from"./chunks/framework.Dt9YBBJv.js";const p=JSON.parse('{"title":"性能优化","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge-lib/js/场景应用/性能优化/index.md","filePath":"knowledge-lib/js/场景应用/性能优化/index.md"}'),t={name:"knowledge-lib/js/场景应用/性能优化/index.md"};function r(c,e,d,n,s,h){return o(),i("div",null,e[0]||(e[0]=[a('<h1 id="性能优化" tabindex="-1">性能优化 <a class="header-anchor" href="#性能优化" aria-label="Permalink to &quot;性能优化&quot;">​</a></h1><h2 id="首页加载优化" tabindex="-1">首页加载优化 <a class="header-anchor" href="#首页加载优化" aria-label="Permalink to &quot;首页加载优化&quot;">​</a></h2><h2 id="打包优化" tabindex="-1">打包优化 <a class="header-anchor" href="#打包优化" aria-label="Permalink to &quot;打包优化&quot;">​</a></h2><h1 id="如何进行网站性能优化" tabindex="-1">如何进行网站性能优化 <a class="header-anchor" href="#如何进行网站性能优化" aria-label="Permalink to &quot;如何进行网站性能优化&quot;">​</a></h1><h2 id="lighthouse" tabindex="-1">LightHouse <a class="header-anchor" href="#lighthouse" aria-label="Permalink to &quot;LightHouse&quot;">​</a></h2><ol><li>优化图片</li><li>图像格式的选择（GIF：提供的颜色较少，可用在一些对颜色要求不高的地方）</li><li>优化 CSS（压缩合并 css，如 margin-top, margin-left...)</li><li>网址后加斜杠（如 www.campr.com/目录，会判断这个目录是什么文件类型，或 者是目录。） cdn 托管</li><li>标明高度和宽度（如果浏览器没有找到这两个参数，它需要一边下载图片一边计算 大小，如果图片很多，浏览器需要不断地调整页面。这不但影响速度，也影响浏览体 验。当浏览器知道了高度和宽度参数后，即使图片暂时无法显示，页面上也会腾出图片的 空位，然后继续加载后面的内容。从而加载时间快了，浏览体验也更好了）</li><li>减少 http 请求（合并文件，合并图片）</li></ol><h2 id="content方面" tabindex="-1"><code>content</code>方面： <a class="header-anchor" href="#content方面" aria-label="Permalink to &quot;`content`方面：&quot;">​</a></h2><ul><li>减少http请求：合并文件、css精灵图、内联图片base64</li><li>减少DNS查询：DNS查询完成之前浏览器不能从这个主机下载任何任何文件。<em>方法</em>：DNS缓存、将资源分布到恰当数量的主机名，平衡并行下载和DNS查询。 <ul><li>当我们使用电脑访问某个网址的时候,需要DNS服务器解析，并且把这个网址的ip临时储存起来，这样你下次访问这个网址的时候就可以直接解析，提高了访问速度，这就是DNS缓存，并且它会为缓存设定一个失效时间 (例如N小时)。</li></ul></li><li>避免使用<code>table</code>，其内容要完全下载后才能显示</li></ul><h2 id="server方面" tabindex="-1"><code>Server</code>方面： <a class="header-anchor" href="#server方面" aria-label="Permalink to &quot;`Server`方面：&quot;">​</a></h2><ul><li>使用<code>CDN</code>：内容分发网络（Content Delivery Network，简称CDN）是建立并覆盖在承载网之上，由分布在不同区域的边缘节点服务器群组成的分布式网络。CDN应用广泛，支持多种行业、多种场景内容加速，例如：图片小文件、大文件下载、视音频点播、直播流媒体、全站加速、安全加速。</li><li>配置<code>ETag</code>：Etag是 Entity tag的缩写，可以理解为“被请求变量的实体值”，Etag是服务端的一个资源的标识，在 <strong>HTTP 响应头</strong>中将其传送到客户端。浏览器<strong>第一次</strong>请求一个资源的时候，服务端给予返回，并且返回了ETag: &quot;50b1c1d4f775c61:df3&quot; 这样的字样给浏览器，当浏览器<strong>再次</strong>请求这个资源的时候，浏览器会将If-None-Match: W/&quot;50b1c1d4f775c61:df3&quot; 传输给服务端，服务端拿到该ETAG，对比资源是否发生变化，如果资源未发生改变，则返回<code>304</code>HTTP状态码，不返回具体的资源。</li><li>对组件使用<code>Gzip</code>压缩：前端如glup、webpack都是自带压缩的，gzip能在此基础上再进行50%的压缩，响应头会包含<code>Content-Encoding: gzip</code></li><li>添加<code>Expires</code>：Expires：Thu，15 Apr 2010 20：00：00 GMT; 告诉浏览器缓存有效性持续到2010年4月15日为止，在这个时间之内相同的请求使用缓存，这个时间之外使用http请求。</li></ul><h2 id="cookie方面" tabindex="-1"><code>Cookie</code>方面： <a class="header-anchor" href="#cookie方面" aria-label="Permalink to &quot;`Cookie`方面：&quot;">​</a></h2><ul><li>减小<code>cookie</code>大小：如果对某个域(Domain)保存了Cookie，那么针对这个域的所有请求，都会发送这些所有的Cookie（哪怕当前请求根本用不着，例如针对图片的请求），大量地、重复地发送Cookie毫无疑问会增加网络的流量，并因此而降低请求被执行的性能。</li></ul><h2 id="css方面" tabindex="-1"><code>css</code>方面： <a class="header-anchor" href="#css方面" aria-label="Permalink to &quot;`css`方面：&quot;">​</a></h2><ul><li>将样式表放到页面顶部</li><li>少用用css表达式，也称动态属性 <code>left: expression(document.body.offsetWidth - 110 + &quot;px&quot;)</code></li><li>使用<code>&lt;link&gt;</code>不适用<code>@import</code><ul><li><code>&lt;link&gt;</code>是xhtml语法无兼容问题，在页面被加载时同时加载；<code>@import</code>只在IE5以上支持，其引用的css要等到页面加载完再加载；前者的权重更高</li></ul></li></ul><h2 id="javascript方面" tabindex="-1"><code>javascript</code>方面： <a class="header-anchor" href="#javascript方面" aria-label="Permalink to &quot;`javascript`方面：&quot;">​</a></h2><ul><li>将脚本放到页面底部</li><li>将js和css从外部引入</li><li>压缩js和css</li><li>减少DOM访问</li><li>用变量保存ajax请求结果，避免频繁访问</li><li>用<code>innerHTML</code>代替DOM操作，较少DOM操作</li><li>设置样式时尽量通过类，而不是操作<code>style</code></li><li>少用全局变量</li><li>模块延迟加载<code>defer</code>或异步加载<code>async</code></li></ul><h2 id="图片方面" tabindex="-1">图片方面： <a class="header-anchor" href="#图片方面" aria-label="Permalink to &quot;图片方面：&quot;">​</a></h2><ul><li>优化图片：根据实际颜色需要选择色深、压缩 <ul><li>色深即色彩深度，色彩深度是计算机图形学领域表示在位图或者视频帧缓冲区中储存1像素的颜色所用的位数，它也称为位/像素（bpp）。色彩深度越高，可用的颜色就越多</li></ul></li><li>优化css精灵图</li><li>不要再html中拉伸图片</li><li>图片服务器，图床</li><li>图片预加载</li><li>视频可以先用图片代替，需要时在改为<code>video</code></li></ul><h2 id="前端性能评级工具" tabindex="-1">前端性能评级工具 <a class="header-anchor" href="#前端性能评级工具" aria-label="Permalink to &quot;前端性能评级工具&quot;">​</a></h2><ul><li>PageSpeed</li><li>YSlow</li></ul><h2 id="渲染优化" tabindex="-1">渲染优化 <a class="header-anchor" href="#渲染优化" aria-label="Permalink to &quot;渲染优化&quot;">​</a></h2><ul><li>不使用<code>iframe</code>：原因参考 ： 9<code>iframe</code>的缺点</li><li>禁止使用<code>gif</code>图片实现<code>loading</code>效果（降低CPU消耗）</li><li>尽量使用CSS3动画替代js动画</li><li>小图标base64，但不建议大图使用比较耗费cpu <ul><li>减少http请求</li><li>避免文件跨域，尤其是小程序</li><li>修改即使生效</li></ul></li><li>页面头部中的<code>&lt;style&gt;</code>和<code>&lt;script&gt;</code>会阻塞页面，因为<code>Renderer</code>进程中js线程和GUI渲染线程是互斥的 <ul><li><a href="https://www.cnblogs.com/yiyi17/p/8645830.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/yiyi17/p/8645830.html</a></li></ul></li></ul><p><a href="https://zhuanlan.zhihu.com/p/60950750" target="_blank" rel="noreferrer">浏览器缓存看这一篇就够了</a></p><p><a href="https://www.cnblogs.com/web-learn/p/15208864.html" target="_blank" rel="noreferrer">前端性能优化二--浏览器缓存</a></p><p><a href="https://www.cnblogs.com/web-learn/p/15217897.html" target="_blank" rel="noreferrer">前端性能优化四--网页加载更快的N种方式</a></p><p>资源优化：图片优化、懒加载、代码拆分、打包优化 网络优化：CDN加速、缓存、HTTP/3协议 首屏优化：SSR、PWA、预渲染、骨架屏 其它优化：SEO、安全性优化（XSS\\CSRF）</p>',26)]))}const b=l(t,[["render",r]]);export{p as __pageData,b as default};
