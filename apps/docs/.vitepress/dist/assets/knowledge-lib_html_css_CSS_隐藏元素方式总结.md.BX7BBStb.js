import{a3 as l,t as i,ao as o,q as a}from"./chunks/framework.Dt9YBBJv.js";const h=JSON.parse('{"title":"隐藏元素方式总结","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge-lib/html&css/CSS/隐藏元素方式总结.md","filePath":"knowledge-lib/html&css/CSS/隐藏元素方式总结.md"}'),t={name:"knowledge-lib/html&css/CSS/隐藏元素方式总结.md"};function d(c,e,r,n,s,p){return a(),i("div",null,e[0]||(e[0]=[o('<h1 id="隐藏元素方式总结" tabindex="-1">隐藏元素方式总结 <a class="header-anchor" href="#隐藏元素方式总结" aria-label="Permalink to &quot;隐藏元素方式总结&quot;">​</a></h1><blockquote><p>CSS 隐藏元素 display、visibility、opacity 的区别</p></blockquote><h2 id="完全隐藏" tabindex="-1">完全隐藏 <a class="header-anchor" href="#完全隐藏" aria-label="Permalink to &quot;完全隐藏&quot;">​</a></h2><blockquote><p>元素从渲染树中消失，不占据空间</p></blockquote><ul><li><p><code>display:none</code>：让元素从渲染树中消失，渲染时不占用任何空间</p><ul><li>非继承属性，子节点是因为父元素从渲染树中消失了，所以也就消失了，修改子节点的属性也没用</li><li>修改常规流中的<code>display</code>通产会造成文档重排</li><li>读屏器不会读取<code>display:none</code>的元素内容</li><li>元素仍然在DOM树中，但不会进入渲染树</li></ul></li><li><p><code>hidden</code>属性：H5新增元素属性，相当于<code>display:none</code></p></li></ul><h2 id="视觉上的隐藏" tabindex="-1">视觉上的隐藏 <a class="header-anchor" href="#视觉上的隐藏" aria-label="Permalink to &quot;视觉上的隐藏&quot;">​</a></h2><blockquote><p>仅屏幕中不可见，仍在渲染树中，占据空间</p></blockquote><ul><li><p><code>opacity: 0</code>：实际上是元素的透明度为 0。</p><ul><li>子元素 opacity:1 是无效的，元素仍旧无法显示。</li><li><strong>绑定的事件仍旧可以触发</strong>。</li></ul></li><li><p><code>visibility: hidden</code>：</p><ul><li>继承属性，子孙节点因为继承了<code>visibility: hidden</code>因此消失，更改属性可以显示出来</li><li>修改<code>visibility</code>只会使本元素重绘</li><li>绑定的事件<strong>不能</strong>触发。</li></ul></li><li><p>其它：</p><ul><li>利用绝对定位，设置一个很大的 <code>left</code> 负值定位，使元素定位在可见区域之外</li><li>宽高为0，overflow: hidden</li><li><code>filter: blur(0);</code> CSS3 属性，将一个元素的模糊度设置为<code>0</code>，从而使这个元素“消失”在页面中</li></ul></li></ul><h2 id="语义上的隐藏" tabindex="-1">语义上的隐藏 <a class="header-anchor" href="#语义上的隐藏" aria-label="Permalink to &quot;语义上的隐藏&quot;">​</a></h2><blockquote><p>读屏软件不可读，但正常占据空间</p></blockquote><p><code>aria-hidden=&quot;true&quot;</code>使读屏软件不可读，但元素仍占据空间并可见</p>',11)]))}const b=l(t,[["render",d]]);export{h as __pageData,b as default};
