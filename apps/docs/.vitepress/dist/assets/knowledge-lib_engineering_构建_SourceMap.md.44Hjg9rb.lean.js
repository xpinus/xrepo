import{a2 as s,t as e,aq as i,q as p}from"./chunks/framework.jAttmLhR.js";const k=JSON.parse('{"title":"sourceMap","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge-lib/engineering/构建/SourceMap.md","filePath":"knowledge-lib/engineering/构建/SourceMap.md"}'),n={name:"knowledge-lib/engineering/构建/SourceMap.md"};function l(o,a,t,r,c,h){return p(),e("div",null,a[0]||(a[0]=[i(`<h1 id="sourcemap" tabindex="-1">sourceMap <a class="header-anchor" href="#sourcemap" aria-label="Permalink to &quot;sourceMap&quot;">​</a></h1><h2 id="什么是-source-map" tabindex="-1">什么是 Source Map <a class="header-anchor" href="#什么是-source-map" aria-label="Permalink to &quot;什么是 Source Map&quot;">​</a></h2><p>通俗的来说， <code>Source Map</code> 就是一个信息文件，里面存储了代码打包转换后的位置信息，实质是一个 <code>json</code> 描述文件，维护了打包前后的代码映射关系。</p><p>我们线上的代码一般都是经过打包的，如果线上代码报错了，想要调试起来，那真是很费劲了。根本没法找到具体位置以及原因，所以这个时候， <code>Source Map</code> 的作用就来了</p><h2 id="source-map-的作用" tabindex="-1">Source Map 的作用 <a class="header-anchor" href="#source-map-的作用" aria-label="Permalink to &quot;Source Map 的作用&quot;">​</a></h2><p>上面的案例只是 <code>Source Map</code> 的初体验，现在来说一下它的作用，我们为什么需要 <code>Source Map</code> ?</p><p>阮一峰老师的<strong>JavaScript Source Map 详解</strong>指出，JavaScript 脚本正变得越来越复杂。大部分源码（尤其是各种函数库和框架）都要经过转换，才能投入生产环境。</p><p>常见的源码转换，主要是以下三种情况：</p><ul><li>压缩，减小体积</li><li>多个文件合并，减少 HTTP 请求数</li><li>其他语言编译成 JavaScript</li></ul><p>这三种情况，都使得实际运行的代码不同于开发代码，除错（ <code>debug</code> ）变得困难重重，所以才需要 <code>Source Map</code> 。结合上面的例子，即使打包过后的代码，也可以找到具体的报错位置，这使得我们 <code>debug</code> 代码变得轻松简单，这就是 <code>Source Map</code> 想要解决的问题。</p><h2 id="如何生成-source-map" tabindex="-1">如何生成 Source Map <a class="header-anchor" href="#如何生成-source-map" aria-label="Permalink to &quot;如何生成 Source Map&quot;">​</a></h2><p>各种主流前端任务管理工具，打包工具都支持生成 <code>Source Map</code> 。</p><ul><li><code>Webpack</code> 是前端打包工具（本文案例都会使用该打包工具）。在其配置文件 <code>webpack.config.js</code> 中设置<strong>devtool</strong>即可生成 <code>Source Map</code> 文件：</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    entry: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./src/index.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    output: {      </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        filename: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bundle.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,      </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        path: path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dist&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    devtool: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;source-map&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><ul><li>Vue-cli</li><li>React-cli</li></ul><h2 id="如何使用-source-map" tabindex="-1">如何使用 Source Map <a class="header-anchor" href="#如何使用-source-map" aria-label="Permalink to &quot;如何使用 Source Map&quot;">​</a></h2><p>生成 <code>Source Map</code> 之后，一般在浏览器中调试使用，前提是需要开启该功能，以 <code>Chrome</code> 为例：</p><p>打开开发者工具，找到 <code>Settins</code> ：选中<code>Enable javascript source maps</code>和<code>Enable css source maps</code></p><h2 id="source-map-的工作原理" tabindex="-1">Source Map 的工作原理 <a class="header-anchor" href="#source-map-的工作原理" aria-label="Permalink to &quot;Source Map 的工作原理&quot;">​</a></h2><p>还是上面这个案例，执行打包后，生成 <code>dist</code> 文件夹，打开 <code>dist/bundld.js</code> ：</p><p><a href="https://mp.weixin.qq.com/s/VUcpY_y3_ihBBsFOLzKlfg" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/VUcpY_y3_ihBBsFOLzKlfg</a></p>`,21)]))}const u=s(n,[["render",l]]);export{k as __pageData,u as default};
