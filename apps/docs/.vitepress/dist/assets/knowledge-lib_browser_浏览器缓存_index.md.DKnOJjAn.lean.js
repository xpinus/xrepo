import{a2 as l,t as o,aq as i,q as a}from"./chunks/framework.jAttmLhR.js";const r="/assets/img.Cjwk841j.png",m=JSON.parse('{"title":"浏览器的缓存机制","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge-lib/browser/浏览器缓存/index.md","filePath":"knowledge-lib/browser/浏览器缓存/index.md"}'),c={name:"knowledge-lib/browser/浏览器缓存/index.md"};function t(d,e,s,n,h,u){return a(),o("div",null,e[0]||(e[0]=[i('<h1 id="浏览器的缓存机制" tabindex="-1">浏览器的缓存机制 <a class="header-anchor" href="#浏览器的缓存机制" aria-label="Permalink to &quot;浏览器的缓存机制&quot;">​</a></h1><p><a href="https://www.jianshu.com/p/54cc04190252" target="_blank" rel="noreferrer">深入理解浏览器的缓存机制</a></p><h2 id="缓存位置" tabindex="-1">缓存位置 <a class="header-anchor" href="#缓存位置" aria-label="Permalink to &quot;缓存位置&quot;">​</a></h2><ul><li>Service Worker (了解)</li></ul><p><a href="https://www.bookstack.cn/read/webapi-tutorial/docs-service-worker.md" target="_blank" rel="noreferrer">Service Worker</a> 首先是一个运行在后台的 Worker 线程，然后它会长期运行，充当一个服务</p><p>Service Worker 实现缓存功能一般分为三个步骤：首先需要先注册 Service Worker，然后监听到 install 事件以后就可以缓存需要的文件，那么在下次用户访问的时候就可以通过拦截请求的方式查询是否存在缓存，存在缓存的话就可以直接读取缓存文件，否则就去请求数据。必须使用https协议。</p><ul><li>Memory Cache <strong>内存中的缓存</strong>，主要包含的是当前中页面中已经抓取到的资源,例如页面上已经下载的样式、脚本、图片等。读取内存中的数据肯定比磁盘快,内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放。 一旦我们关闭 Tab 页面，内存中的缓存也就被释放了。</li></ul><p>内存缓存中有一块重要的缓存资源是<code>preloader</code>相关指令（例如<link rel="prefetch">）下载的资源。总所周知preloader的相关指令已经是页面优化的常见手段之一，它可以一边解析js/css文件，一边网络请求下一个资源。</p><p>内存缓存在缓存资源时并不关心返回资源的HTTP缓存头Cache-Control是什么值，同时资源的匹配也并非仅仅是对URL做匹配，还可能会对Content-Type，CORS等其他特征做校验。</p><ul><li>Disk Cache</li></ul><p>存储在硬盘中的缓存，读取速度慢点，但是什么都能存储到磁盘中，比之 Memory Cache 胜在容量和存储时效性上。</p><p>根据 HTTP Herder 中的字段判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源已经过期需要重新请求。并且即使在跨站点的情况下，相同地址的资源一旦被硬盘缓存下来，就不会再次去请求数据。</p><ul><li>Push Cache (了解) Push Cache（推送缓存）是 HTTP/2 中的内容，当以上三种缓存都没有命中时，它才会被使用。它只在会话（Session）中存在，一旦会话结束就被释放，并且缓存时间也很短暂，在Chrome浏览器中只有5分钟左右，同时它也并非严格执行HTTP头中的缓存指令</li></ul><p>以上四种缓存都没有命中的话，那么只能发起请求来获取资源了</p><blockquote><p>浏览器缓存分为强缓存和协商缓存。当客户端请求某个资源时，获取缓存的流程如下</p></blockquote><p><img src="'+r+'" alt="缓存流程"></p><ul><li>当 <code>ctrl+f5</code> 强制刷新网页时，直接从服务器加载，跳过强缓存和协商缓存；</li><li>当 <code>f5</code>刷新网页时，跳过强缓存，但是会检查协商缓存；</li></ul><h2 id="强缓存" tabindex="-1">强缓存 <a class="header-anchor" href="#强缓存" aria-label="Permalink to &quot;强缓存&quot;">​</a></h2><blockquote><p>不会向服务器发送请求，直接从缓存中读取资源, Chrome Dev的Nextwork中的Size显示from disk cache或from memory cache，强缓存可以通过设置两种 HTTP Header 实现：</p></blockquote><ul><li><code>Expires</code>：缓存过期时间，用来指定资源到期的时间，是服务器端的具体的时间点 <ul><li>Expires=max-age + 请求时间，需要和Last-modified结合使用</li><li>Expires是<strong>服务器响应消息头字段</strong>，在响应http请求时告诉浏览器在过期时间前浏览器可以直接从浏览器缓存取数据，而无需再次请求</li><li>是 <code>http/1.0</code> 时的规范，值为一个绝对时间的 <code>GMT</code> 格式的时间字符串，<strong>受限于本地时间</strong>，如果修改了本地时间，可能会造成缓存失效。</li></ul></li><li><code>Cache-Control:max-age</code><ul><li>该字段是 <code>http/1.1</code>的规范，强缓存利用其 <code>max-age</code> 值来判断缓存资源的最大生命周期，它的值单位为秒，如300代表5分钟）</li><li>可以在请求头或响应头中设置，有多种指令可以配合使用： <ul><li><code>max-age</code>: 强缓存过期时间</li><li><code>s-maxage</code>: 覆盖max-age，作用一样，只在代理服务器中生效</li><li><code>no-store</code>：不做任何形式的缓存</li><li><code>no-cache</code>：缓存，但下次发起请求需要发起验证看是否过期（协商缓存验证，表示不使用 Cache-Control的缓存控制方式做前置验证，而是使用 Etag 或者Last-Modified字段来控制缓存）</li><li><code>public</code>：表示响应可以被客户端和代理服务器缓存</li><li><code>private</code>：表示响应只可以被客户端缓存</li><li><code>max-state=30</code>：30s内，即使缓存过期，也使用该缓存</li><li><code>min-refresh=30</code>：30s内获取最新的响应</li></ul></li></ul></li></ul><h2 id="协商缓存" tabindex="-1">协商缓存 <a class="header-anchor" href="#协商缓存" aria-label="Permalink to &quot;协商缓存&quot;">​</a></h2><blockquote><p>协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程 协商缓存可以通过设置两种 HTTP Header 实现：</p></blockquote><ul><li><code>Last-Modified</code>和<code>If-Modified-Since</code><ul><li>Last-Modified 值为资源最后更新时间，第一次请求资源后<strong>随服务器响应头返回</strong><ul><li><strong>问题</strong>：如果本地打开缓存文件，即使没有对文件进行修改，但还是会造成 Last-Modified 被修改，服务端不能命中缓存导致发送相同的资源</li><li><strong>问题</strong>：以秒计时，如果在不可感知的时间内修改完成文件，那么服务端会认为资源还是命中了，不会返回正确的资源</li></ul></li><li>If-Modified-Since 通过比较两个时间来判断资源在两次请求期间是否有过修改，如果没有修改，则命中协商缓存</li></ul></li><li><code>ETag</code>和<code>If-None-Match</code><ul><li>Etag 表示资源内容的唯一标识，第一次请求资源后<strong>随服务器响应头返回</strong><ul><li>更精确，但效率较低</li><li>优先级更高</li></ul></li><li>If-None-Match 服务器通过比较请求头部的<code>If-None-Match</code>与当前资源的<code>ETag</code>是否一致来判断资源是否在两次请求之间有过修改，如果没有修改，则命中协商缓存</li></ul></li></ul><p><strong>补充</strong></p><ul><li>Vary: 额外的条件判断是否使用缓存，如cookie</li></ul><h2 id="缓存读取规则" tabindex="-1">缓存读取规则 <a class="header-anchor" href="#缓存读取规则" aria-label="Permalink to &quot;缓存读取规则&quot;">​</a></h2><ol><li>从service worker缓存中读取 (如果有service worker)</li><li>查看memory cache</li><li>查看disk cache: 如果强缓存存在且未失效，不请求服务器，状态码200；如果强缓存存在但失效，使用协商缓存，比较后确定是304还是200</li><li>发送请求</li><li>把响应存入Disk cache （如果响应头信息有相应配置 ）</li><li>把相应内容存入memory cache （无视http头配置）</li><li>把响应内容存入service worker的cache storage（如果有service worker）</li></ol><blockquote><p>面试题： 我看你刚才提到了浏览器缓存，你来具体说一下呢？浏览器缓存有哪些类型？不同的类型是在什么时候命中的？</p></blockquote><ul><li>浏览器缓存是浏览器内部的一种机制，用于缓存 HTML、CSS、JS 以及图片等资源，这样可以减少服务器负担，加快页面加载速度。</li><li>浏览器缓存主要分为两种类型：强缓存和弱缓存。 <ul><li>强缓存：是指浏览器在一定时间内直接从缓存中读取资源，而不发起请求到服务器。即使用户刷新页面，浏览器也不会向服务器请求资源。强缓存主要通过 HTTP 响应头中的 Expires 和 Cache-Control 字段来控制。</li><li>弱缓存：弱缓存则是在强缓存没有命中时，会去检查弱缓存。弱缓存也被称之为协商缓存，浏览器在请求资源时，会先发送一个请求到服务器，询问资源是否有更新。如果资源没有更新，服务器会返回 304 状态码，告诉浏览器继续使用缓存，这就是命中了弱缓存。如果资源有更新，服务器则返回新的资源内容。弱缓存主要通过 HTTP 响应头中的 Last-Modified 和 ETag 字段来控制。</li></ul></li><li>一般对于不经常变化的静态资源，如网站的图片、样式表、JS 库等，通常会使用强缓存，并设置较长的缓存时间。对于经常变化的动态资源，如 API 响应、用户数据等通常使用弱缓存。</li><li>所以生产环境下为了充分利用浏览器缓存机制，一般会生成 hash 值，这样可以确保文件名唯一，当文件内容发生变化时，文件名也会变化，从而强制浏览器加载新的资源。但是开发环境下不需要，开发环境下代码频繁更改，生成 hash 反而浪费时间，特别我们的项目规模又比较大，去掉 hash 后构建时间居然有 20s 左右的优化，从 1min 降到了 40s 左右。</li></ul><blockquote><p>ajax如何避免浏览器缓存方法</p></blockquote><ul><li>添加时间戳或随即参数 <code>data.json?timestamp=${Date.now()}</code></li><li>禁用缓存头信息： <code>Cache-Control:no-cache</code> 在请求头中添加，告诉浏览器不使用缓存</li><li>服务器禁用缓存</li></ul>',31)]))}const k=l(c,[["render",t]]);export{m as __pageData,k as default};
