import{a2 as i,t as a,ao as n,q as l}from"./chunks/framework.tQiMsDJj.js";const d=JSON.parse('{"title":"单页面应用的重定向","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge-lib/js/场景应用/单页面应用的重定向.md","filePath":"knowledge-lib/js/场景应用/单页面应用的重定向.md"}'),t={name:"knowledge-lib/js/场景应用/单页面应用的重定向.md"};function e(p,s,h,k,r,o){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="单页面应用的重定向" tabindex="-1">单页面应用的重定向 <a class="header-anchor" href="#单页面应用的重定向" aria-label="Permalink to &quot;单页面应用的重定向&quot;">​</a></h1><p><strong>场景描述</strong></p><p>很多网站都会有登录校验，其流程如下：</p><ol><li>访问网站网址；</li><li>服务器发现请求的请求头或者<code>Cookie</code>中没有带有登录信息(一般是一个<code>Token</code>)，就返回一个状态码为<code>302</code>的重定向响应，并在响应头的<code>Location</code>中写入重定向的地址，从而跳转至登陆页面；</li><li>浏览器接收到响应后**(注：对于3xx的重定向响应，axios无法拦截，是浏览器自动处理的)**，发现是302，就会用 <code>get</code> 方法重新请求 Location 中指定的登录网址；</li><li>在登录网址输入账号密码登录后，服务端会在响应的 <code>Set-Cookie</code> 中写入我们的登录信息，同时浏览器的代码会重新跳转到我们一开始访问的页面。</li></ol><p><strong>问题</strong>这里我是一个单页面应用，一开始，我的观察一下当后端返回302时，浏览器这边显示状态码302，location就是对应的网址（无效的网址会进行拼接<a href="https://juejin.cn/post/6844904151705452552%EF%BC%89,%E5%A6%82%E4%B8%8B" target="_blank" rel="noreferrer">https://juejin.cn/post/6844904151705452552）,如下</a></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>egg后端</span></span>
<span class="line"><span>ctx.redirect(&#39;/user/login&#39;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>浏览器接收到服务器响应为</span></span>
<span class="line"><span>Status Code: 302 Found</span></span>
<span class="line"><span>location: /user/login</span></span>
<span class="line"><span>然后会自动发起一个get请求</span></span>
<span class="line"><span>http://localhost:8000/user/login</span></span></code></pre></div><p><strong>出现问题1</strong>：发送了请求但页面没跳转到登录页啊？（初始页不是登录页）</p><p>原因：单页面应用的页面是靠history或者hash切换的，浏览器发起的请求并不会改变页面</p><p>🙄好吧，我想这问题也好解决，咱么写个axios拦截器，判断下这次返回是否是个302然后手动跳转不就行了，结果试了一下，da mei</p><p><strong>问题2</strong>：发现axios根本拦截不到302，<strong>对于3xx的重定向都是由浏览器自动处理的</strong>(<a href="https://juejin.cn/post/6889782338115207182" target="_blank" rel="noreferrer">Axios 响应不能拦截 302 状态码？</a>)，这...</p><h2 id="解决方式1-不使用302" tabindex="-1">解决方式1 不使用302 <a class="header-anchor" href="#解决方式1-不使用302" aria-label="Permalink to &quot;解决方式1 不使用302&quot;">​</a></h2><p>与后端沟通（这里就是和我自己沟通😑）</p><p>遇到重定向，使用如<code>401</code>，手动设置location，然后前端拦截<code>401</code>根据<code>location</code>进行手动跳转</p><h2 id="解决方式2-reponseurl" tabindex="-1">解决方式2 reponseUrl <a class="header-anchor" href="#解决方式2-reponseurl" aria-label="Permalink to &quot;解决方式2 reponseUrl&quot;">​</a></h2><p>限制：重定向后的页面要保证正常返回</p><p>不用找后端了，浏览器在遇到302后自动发起一个get请求，通过axios的response拦截器，发现res.request.responseUrl就是重定向的url，从而可以判断是否发生过重定向，然后手动跳转</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">    ...</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">    request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:  {</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">        ...</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">    	responseURL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:8000/user/login&quot;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">    	...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}	</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="解决方式3-约定url参数" tabindex="-1">解决方式3 约定url参数 <a class="header-anchor" href="#解决方式3-约定url参数" aria-label="Permalink to &quot;解决方式3 约定url参数&quot;">​</a></h2><p>在302时约定在url上携带参数如_redirect_url，前端在进入页面是检查参数，判断是否发生重定向</p><h2 id="解决方式4-fetch" tabindex="-1">解决方式4 fetch <a class="header-anchor" href="#解决方式4-fetch" aria-label="Permalink to &quot;解决方式4 fetch&quot;">​</a></h2><p><code>redirect: &#39;manual&#39;</code>：阻止 fetch 自动跟随重定向。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://example.com/some-url&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  redirect: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;manual&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 阻止 fetch 自动重定向</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (response.status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 302</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> location</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.headers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Location&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取重定向目标</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;重定向目标:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, location);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 如果需要，可以手动跳转</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // window.location.href = location;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 处理其他响应</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;响应数据:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;请求失败:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, error);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div>`,22)]))}const c=i(t,[["render",e]]);export{d as __pageData,c as default};
