import{a2 as i,t as a,ao as n,q as l}from"./chunks/framework.tQiMsDJj.js";const o=JSON.parse('{"title":"购买域名和服务器","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge-lib/blogs/着手搭建网站.md","filePath":"knowledge-lib/blogs/着手搭建网站.md"}'),p={name:"knowledge-lib/blogs/着手搭建网站.md"};function e(t,s,h,k,r,d){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="购买域名和服务器" tabindex="-1">购买域名和服务器 <a class="header-anchor" href="#购买域名和服务器" aria-label="Permalink to &quot;购买域名和服务器&quot;">​</a></h1><p>网站部署上线必不可少的需要域名(xxx.com)用来访问，以及程序运行的服务器，这些都是需要买的💰，这两者最好选择同一家购买，方便统一管理。</p><h2 id="域名" tabindex="-1">域名 <a class="header-anchor" href="#域名" aria-label="Permalink to &quot;域名&quot;">​</a></h2><p><strong>域名商：</strong> 阿里云、腾讯云等 <strong>后缀：</strong></p><ul><li>.com 通用域名</li><li>.net 网络服务商</li><li>.cn 中国</li><li>.gov 政府部门</li><li>.club</li><li>.top</li><li>.xyz</li></ul><p><strong>购买：</strong> 在哪买都一样，只是价格的区别，最好和你买的服务器一个服务商，注意像是腾讯云有一个首次购买优惠折扣，最好先买服务器，再买域名。</p><p>**备案：**我国的域名要想正常使用必须要进行备案，腾讯云购买后会提示你进行备案，根据流程走就行。域名购买<code>72小时</code>后才可以进行备案，备案时间比较长20天左右，耐心等待。之后还有一个公安备案。</p><p><img src="https://imagehost-1311720054.cos.ap-nanjing.myqcloud.com/blog/%E7%9D%80%E6%89%8B%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99/image-20220709163010820.png" alt="image-20220709163010820"></p><h2 id="服务器" tabindex="-1">服务器 <a class="header-anchor" href="#服务器" aria-label="Permalink to &quot;服务器&quot;">​</a></h2><p>根据自己钱包厚度选择合适的就行👛😭，我也是在腾讯云购买了服务器</p><p>选择服务器是会让你选择服务器初始系统，腾讯云是提供了很多可选的，选错了也没事，以后重装系统很方便的。</p><p>我选择了ubuntu 20 -docekr 基础镜像，未来会使用docker进行部署网站，方便一点。</p><p>1 重置密码，ubuntu还需要根据官方提示开启root的ssh登录</p><p>2 本地使用mobaXterm远程连接（或者其他远程连接工具）</p><p>3 配置git</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh-keygen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ed25519</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;your_email@example.com&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 生成ssh</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 复制生成的xxx.pub文件内容</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在GitHub -&gt; Setting -&gt; SSH -&gt; 新增，自定义一个名字，粘贴生成的key</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># git clone就可以拉取自己的代码了</span></span></code></pre></div><p>4 安装node用于执行我的脚本工具</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 首先安装npm</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 然后安装n</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> n</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 最后安装node 最新lts版本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lts</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># npm 更新</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> istall</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yarn</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span></span></code></pre></div><h1 id="deploy-util" tabindex="-1">Deploy-util <a class="header-anchor" href="#deploy-util" aria-label="Permalink to &quot;Deploy-util&quot;">​</a></h1><p>便捷拉取代码，编译镜像，部署的脚手架工具。</p><ul><li><a href="https://www.npmjs.com/package/chalk" target="_blank" rel="noreferrer">chalk</a> node终端样式库</li><li><a href="https://www.npmjs.com/package/commander" target="_blank" rel="noreferrer">commander</a> 完整的node命令行解决方案</li><li><a href="https://www.npmjs.com/package/ora" target="_blank" rel="noreferrer">ora</a> 优雅的终端微调器, 实现加载中的效果</li><li><a href="https://www.npmjs.com/package//inquirer" target="_blank" rel="noreferrer">inquirer</a> 常用交互式命令行用户界面的集合</li><li><a href="http://nodejs.cn/api/child_process.html#child_processexeccommand-options-callback" target="_blank" rel="noreferrer">child_process</a> 执行终端命令</li><li><a href="https://www.npmjs.com/package/fs-extra" target="_blank" rel="noreferrer">fs-extra</a> 扩展的fs，便捷文件夹复制</li><li><a href="https://www.npmjs.com/package/dotenv" target="_blank" rel="noreferrer">dotenv</a> 用于从.env文件中加载环境变量</li></ul><p>使用：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 全局安装</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deploy-util</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 测试</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deploy-util</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --help</span></span></code></pre></div><p><strong>问题：脚本最终需要在node环境中运行，所以使用require不能import</strong></p><p><a href="https://blog.csdn.net/zwkkkk1/article/details/81564971" target="_blank" rel="noreferrer">一些解决方案</a></p><p><strong>问题: ES Module下<code>__dirname</code> <code>__filename</code> 不存在</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { fileURLToPath } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;url&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { dirname } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;path&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __filename</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fileURLToPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.url)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __dirname</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> dirname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__filename)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__filename);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname);</span></span></code></pre></div><p><strong>问题：</strong></p><ol><li><p>__dirname 可以用来动态获取当前文件所属目录的绝对路径</p></li><li><p>__filename 可以用来动态获取当前文件的绝对路径，包含当前文件</p></li></ol><p>// __dirname 和 __filename 是不受执行 node 命令所属路径影响的</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 测试 js 文件文件路径为: E:\\前端相关\\demo_js\\test\\31.path.js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;__dirname-&gt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, __dirname)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;__filename-&gt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, __filename)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: __dirname-&gt; E:\\前端相关\\demo_js\\test</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: __filename-&gt; E:\\前端相关\\demo_js\\test\\31.path.js</span></span></code></pre></div><p><strong>问题：exports和module.exports</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//写法1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hello</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(‘world’);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//写法2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expObj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(‘world’);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expObj;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(‘hello’);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>每一个node.js执行文件，都自动创建一个<code>module.exports = {}</code>，<code>exports.xxx</code>的写法是为了方便导出实现的特性，实际上最终还是会转变为<code>module.export</code>，注意当设置了<code>module.exports</code>时，<code>exports.xxx</code>的设置会失效</p><h2 id="发布npm" tabindex="-1">发布npm <a class="header-anchor" href="#发布npm" aria-label="Permalink to &quot;发布npm&quot;">​</a></h2><p>1 在<a href="https://www.npmjs.com/" target="_blank" rel="noreferrer">npm</a>注册账号</p><p>2 npm login <a href="https://www.jianshu.com/p/0faaff26a2c8" target="_blank" rel="noreferrer">参考</a></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 首先确保当前的源是官方源</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http://registry.npm.taobao.org/  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 像我是设置了淘宝的源，这是只读的，需要切换</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 切换</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://registry.npmjs.org/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> login</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 根据提示输入用户名、密码、邮箱、邮箱验证码</span></span></code></pre></div><p>3 npm publish</p><p>成功后就可以在npm上搜索到了</p><p>4 更新，可以使用yarn publish，它会提示你修改version</p><p>5 成功，可以在npm中搜索到了</p><p><img src="https://imagehost-1311720054.cos.ap-nanjing.myqcloud.com/blog/%E7%9D%80%E6%89%8B%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99/image-20220709163049501.png" alt="image-20220709163049501"></p><p><strong>问题</strong></p><p><img src="https://imagehost-1311720054.cos.ap-nanjing.myqcloud.com/blog/%E7%9D%80%E6%89%8B%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99/image-20220709163059361.png" alt="image-20220709163059361"></p><p>看似是权限问题，但npm login已经执行了，很可能是包的名称重复了，换一个名字试试</p><h1 id="nginx-部署前端项目" tabindex="-1">nginx 部署前端项目 <a class="header-anchor" href="#nginx-部署前端项目" aria-label="Permalink to &quot;nginx 部署前端项目&quot;">​</a></h1>`,47)]))}const c=i(p,[["render",e]]);export{o as __pageData,c as default};
