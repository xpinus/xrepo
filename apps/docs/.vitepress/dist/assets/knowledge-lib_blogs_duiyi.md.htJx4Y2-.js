import{a3 as l,t as a,ao as e,q as s}from"./chunks/framework.Dt9YBBJv.js";const c=JSON.parse('{"title":"入学","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge-lib/blogs/duiyi.md","filePath":"knowledge-lib/blogs/duiyi.md"}'),t={name:"knowledge-lib/blogs/duiyi.md"};function n(h,i,p,r,o,u){return s(),a("div",null,i[0]||(i[0]=[e(`<p><a href="https://eizwbs2n02l.feishu.cn/docx/BYYQd4xJzo8sVgxRC8lcsCx3nse" target="_blank" rel="noreferrer">https://eizwbs2n02l.feishu.cn/docx/BYYQd4xJzo8sVgxRC8lcsCx3nse</a></p><h1 id="入学" tabindex="-1">入学 <a class="header-anchor" href="#入学" aria-label="Permalink to &quot;入学&quot;">​</a></h1><p><a href="https://duyiedu.yuque.com/fmi7t1/fwfys4/qy05sy?singleDoc#" target="_blank" rel="noreferrer">https://duyiedu.yuque.com/fmi7t1/fwfys4/qy05sy?singleDoc#</a> 《ev播放器下载教程》</p><p>简单介绍一下做这个事情的背景 通过什么工具去量化时间 你思考的方案以及最终落地的方案 落地方案的一个整体效果</p><p>面试时哪怕感觉很简单的文通，会觉得很简单，但是你简单的泛泛而谈，和你引经据典并且包含着具体解决方案的去谈，给人的感觉是不一样的</p><p>EV上的课程都已经都开通了，下面是EV的账号和密码，EV只能登录两个设备，多了会影响账号使用，所以要选好长期使用的设备哈</p><p>账号：0145中语强笔037 密码：15195862833（你的手机号）</p><p>课程所需资料都在资料文件链接里，链接自动更新，保存好即可，不需要权限！</p><p>1、先将链接复制到浏览器，看下能不能打开 2、如果不能打开，用自己手机号登陆即可 3、登陆后仍打不开，刷新/重新进就可以了</p><p><a href="https://duyiedu.yuque.com/fmi7t1/nwhh7g/bcqyd9mdraozmatp?singleDoc#" target="_blank" rel="noreferrer">https://duyiedu.yuque.com/fmi7t1/nwhh7g/bcqyd9mdraozmatp?singleDoc#</a> 《前端-语言基础文件资料》</p><p><a href="https://duyiedu.yuque.com/fmi7t1/nwhh7g/gtucggflr4xxpp6m?singleDoc#" target="_blank" rel="noreferrer">https://duyiedu.yuque.com/fmi7t1/nwhh7g/gtucggflr4xxpp6m?singleDoc#</a> 《前端-中枢课文件资料》</p><p><a href="https://duyiedu.yuque.com/fmi7t1/nwhh7g/tfd9blexuk02ggqr?singleDoc#" target="_blank" rel="noreferrer">https://duyiedu.yuque.com/fmi7t1/nwhh7g/tfd9blexuk02ggqr?singleDoc#</a> 《前端-强化课文件资料》</p><p><a href="https://duyiedu.yuque.com/fmi7t1/nwhh7g/ohf2y7sggobkm47p?singleDoc#" target="_blank" rel="noreferrer">https://duyiedu.yuque.com/fmi7t1/nwhh7g/ohf2y7sggobkm47p?singleDoc#</a> 《前端-笔面试甄选文件资料》</p><p><a href="https://duyiedu.yuque.com/hghs2q/ybli0a/kgbr16?singleDoc#" target="_blank" rel="noreferrer">https://duyiedu.yuque.com/hghs2q/ybli0a/kgbr16?singleDoc#</a> 《前端课程目录（新）》这是对着ev上课程的目录，也是学习目录。可在这个界面通过Ctrl+F 进行检索所需要的课程内容</p><h1 id="难点" tabindex="-1">难点 <a class="header-anchor" href="#难点" aria-label="Permalink to &quot;难点&quot;">​</a></h1><ol><li>使用webassembly提升图像处理性能</li><li>优化webpack构建时间</li><li>优化文字转语音中的性能问题</li><li>实时协作</li><li>将网页内容复制成图片导出</li><li>封装约定式路由的vite插件</li><li>封装数据存储与同步的表单模块</li><li>优化虚拟列表的滚动</li><li>微前端解决巨石应用</li><li>DNS解析优化</li><li>前端监控</li><li>跨标签页通信</li><li>vite性能优化</li><li>计时器节流问题</li><li>多文件预览</li><li>defer优化白屏时间</li></ol><h2 id="html-css" tabindex="-1">html + css <a class="header-anchor" href="#html-css" aria-label="Permalink to &quot;html + css&quot;">​</a></h2><h3 id="补充重要知识" tabindex="-1">补充重要知识 <a class="header-anchor" href="#补充重要知识" aria-label="Permalink to &quot;补充重要知识&quot;">​</a></h3><ul><li><p>box-sizing: content-box; // border-box</p></li><li><p>alpha通道 rgba #00000080</p></li><li><p>尺寸的百分比：相对于参考系</p><ul><li>普通元素为父元素的<code>内容区域</code></li><li>绝对/固定定位元素，相对于父级定位元素的 <code>conten+padding 区域</code></li><li>height % 当高度受本身影响时无效</li><li>padding\\border\\margin: 不管方向，参考系的<code>宽度</code></li></ul></li><li><p>最大最小宽度</p><ul><li>往往将min-width其设置为设计稿的宽度</li></ul></li></ul><h3 id="表单进阶" tabindex="-1">表单进阶 <a class="header-anchor" href="#表单进阶" aria-label="Permalink to &quot;表单进阶&quot;">​</a></h3><ul><li>form中input type=&quot;submit&quot;点击才有提交页面刷新操作，内部任意input中回车会自动触发form的提交</li><li>button默认就是一个submit <ul><li>type=&quot;button&quot; 指明这只是一个普通按钮</li><li>type=&quot;reset&quot; 会把form重置</li></ul></li><li>select元素设置multiple=&quot;multiple&quot;, 多选列表 <ul><li>布尔属性</li></ul></li><li>textarea的col row一般没用，用css去调整大小</li></ul><h3 id="精灵图-sprite" tabindex="-1">精灵图 sprite <a class="header-anchor" href="#精灵图-sprite" aria-label="Permalink to &quot;精灵图 sprite&quot;">​</a></h3><h3 id="绝对定位" tabindex="-1">绝对定位 <a class="header-anchor" href="#绝对定位" aria-label="Permalink to &quot;绝对定位&quot;">​</a></h3><ul><li>fixed参考视口viewport</li></ul><h3 id="属性值的计算过程" tabindex="-1">属性值的计算过程 <a class="header-anchor" href="#属性值的计算过程" aria-label="Permalink to &quot;属性值的计算过程&quot;">​</a></h3><p>无属性</p><p>||</p><ol><li>确定声明值 <ul><li>参考样式表中没有冲突的声明，作为css属性值</li></ul></li><li>层叠冲突 <ul><li>处理层叠样式表的冲突 <ul><li>比较重要性，作者样式表直接替代浏览器默认样式表</li><li>比较特殊性（选择器权重）</li><li>比较原次序，后面覆盖前面</li></ul></li></ul></li><li>使用继承 <ul><li>对仍然没有值的属性，若可以继承，则继承父元素的值 <ul><li>color\\font</li></ul></li></ul></li><li>使用默认值 <ul><li>对仍然没有值的属性，使用默认值</li></ul></li></ol><p>||</p><p>computed style 最终每个属性都有值 （都会换算成绝对单位）</p><h3 id="拓展知识" tabindex="-1">拓展知识 <a class="header-anchor" href="#拓展知识" aria-label="Permalink to &quot;拓展知识&quot;">​</a></h3><ul><li>伪类选择器</li><li>contenteditble</li><li>table <ul><li>为什么效率低？</li></ul></li></ul><h2 id="js" tabindex="-1">js <a class="header-anchor" href="#js" aria-label="Permalink to &quot;js&quot;">​</a></h2><p>命令式编程语言，本质是<code>处理数据</code></p><h3 id="数据的表达" tabindex="-1">数据的表达 <a class="header-anchor" href="#数据的表达" aria-label="Permalink to &quot;数据的表达&quot;">​</a></h3><ul><li><p>变量 var a;</p><ul><li>允许数字、字母、下划线、$</li><li>不得已数字开头</li><li>避免关键字</li></ul></li><li><p>字面量 a = 123</p></li><li><p>表达式 a + b</p></li><li><p>数据类型：基本 + 原始</p><ul><li><p>object的属性名<code>一定是字符串</code></p></li><li><p>数组，本质也是一个对象</p><ul><li><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ceshi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">，</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ‘</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">’： “cc”,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;length&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul></li></ul></li></ul><h3 id="数据的运算" tabindex="-1">数据的运算 <a class="header-anchor" href="#数据的运算" aria-label="Permalink to &quot;数据的运算&quot;">​</a></h3><ul><li><p>类型的隐式转换</p><ul><li>page = +page || 1 // 将page转成数字</li></ul></li><li><p>布尔判定</p><ul><li>false null undefined 0 NaN &#39;&#39; 判定为 false</li></ul></li></ul><h3 id="数据的存储和传递" tabindex="-1">数据的存储和传递 <a class="header-anchor" href="#数据的存储和传递" aria-label="Permalink to &quot;数据的存储和传递&quot;">​</a></h3><h3 id="数据的作用域" tabindex="-1">数据的作用域 <a class="header-anchor" href="#数据的作用域" aria-label="Permalink to &quot;数据的作用域&quot;">​</a></h3><ul><li>js有两种作用域：全局作用域和函数作用域 ？？ 那所谓块级作用域是什么， {} 内定义的函数为什么外部无法使用 <ul><li>内部的作用域能访问外部，反之不行</li><li>如果内部引用外部的变量，会产生闭包</li><li>内部访问外部，取决于函数定义的位置，和调用无关</li></ul></li><li>作用域内定义的变量、函数声明会提升到作用域顶部 <ul><li>undefined [Function: xxx]</li></ul></li></ul><h3 id="全局对象" tabindex="-1">全局对象 <a class="header-anchor" href="#全局对象" aria-label="Permalink to &quot;全局对象&quot;">​</a></h3><ul><li>浏览器 window</li><li>node global</li></ul><p>所有的全局变量、函数都会挂在全局对象上，</p><ul><li>这被称之为全局污染</li><li>如果要避免，利用立即执行函数IIFE</li></ul><h3 id="构造函数" tabindex="-1">构造函数 <a class="header-anchor" href="#构造函数" aria-label="Permalink to &quot;构造函数&quot;">​</a></h3><h3 id="原型" tabindex="-1">原型 <a class="header-anchor" href="#原型" aria-label="Permalink to &quot;原型&quot;">​</a></h3><ul><li><p>每个函数都自动附带一个属性prototype</p><ul><li><p>函数 === 》 prototype</p><p>|| ||</p><p>new ==》 实例 ==》_<em>proto</em>_ [[Prototype]]</p></li></ul></li><li><p>原型链</p><ul><li>当读取对象成员时，先看自身成员是否存在，如果没有会在其原型链上查找</li><li><code>Object.prototype</code>指向null</li><li>函数也是对象，所有函数的 _<em>proto</em>_ 指向<code>Function.prototype</code> , Function的__proto__指向自身的原型</li><li>Function的原型和Object的原型是特殊的</li><li>Function的原型的[[Protorype]]指向Object的原型</li></ul></li><li><p>利用原型链判断类型</p></li><li><p>学会创建空原型对象</p><ul><li>Object.create()</li><li><code>obj.__proto__</code>= null</li><li>Object.setPrototypeOf(obj, null)</li></ul></li><li><p>继承</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inherit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">Child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">Parent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setPrototypeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Parent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><h3 id="this" tabindex="-1">this <a class="header-anchor" href="#this" aria-label="Permalink to &quot;this&quot;">​</a></h3><ul><li>在全局代码中，this指向全局对象</li><li>在函数中，他的指向取决于函数是被如何调用的 <ul><li>new ===== 新对象</li><li>直接调用 ===== 全局对象</li><li>通过对象调用 ===== 调用的对象</li><li>call\\apply ===== 绑定的目标参数</li></ul></li></ul><p><a href="http://interview.poetries.top/" target="_blank" rel="noreferrer">http://interview.poetries.top/</a> 10000499012021102500811544358157</p>`,51)]))}const k=l(t,[["render",n]]);export{c as __pageData,k as default};
