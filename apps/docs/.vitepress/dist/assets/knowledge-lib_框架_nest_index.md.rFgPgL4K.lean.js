import{a3 as a,t as l,ao as i,q as r}from"./chunks/framework.Dt9YBBJv.js";const u=JSON.parse('{"title":"Nestjs","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge-lib/框架/nest/index.md","filePath":"knowledge-lib/框架/nest/index.md"}'),t={name:"knowledge-lib/框架/nest/index.md"};function o(s,e,d,n,h,p){return r(),l("div",null,e[0]||(e[0]=[i('<h1 id="nestjs" tabindex="-1">Nestjs <a class="header-anchor" href="#nestjs" aria-label="Permalink to &quot;Nestjs&quot;">​</a></h1><blockquote><p>之前有使用过nodejs开发服务器吗，说说你最常用的框架，并说明其设计思想与原理</p></blockquote><p>我了解过的框架(库)有</p><ol><li>express</li><li>koa</li><li>egg</li><li>nestjs</li></ol><h2 id="nestjs-1" tabindex="-1">nestjs <a class="header-anchor" href="#nestjs-1" aria-label="Permalink to &quot;nestjs&quot;">​</a></h2><p>借鉴了spring boot, AOP\\IoC</p><ul><li>typescript</li><li>清晰的模块化设计理念</li><li>可插拔的生态，底层可以用express\\fastify\\websocket\\graphql</li></ul><h3 id="模块-module" tabindex="-1">模块 Module <a class="header-anchor" href="#模块-module" aria-label="Permalink to &quot;模块 Module&quot;">​</a></h3><h3 id="控制器-controller" tabindex="-1">控制器 Controller <a class="header-anchor" href="#控制器-controller" aria-label="Permalink to &quot;控制器 Controller&quot;">​</a></h3><p>控制前后端连接点，请求处理</p><h3 id="服务-providers" tabindex="-1">服务 Providers <a class="header-anchor" href="#服务-providers" aria-label="Permalink to &quot;服务 Providers&quot;">​</a></h3><p>提供具体的个性化服务，包含 数据库连接池、kafka驱动、redis处理、文件IO等</p><h3 id="中间件-middleware" tabindex="-1">中间件 Middleware <a class="header-anchor" href="#中间件-middleware" aria-label="Permalink to &quot;中间件 Middleware&quot;">​</a></h3><p>面向切面的，通过不改变原逻辑的方式，为系统提供一些个性化处理</p><p>日志</p><h3 id="守卫-guard" tabindex="-1">守卫 Guard <a class="header-anchor" href="#守卫-guard" aria-label="Permalink to &quot;守卫 Guard&quot;">​</a></h3><p>权限控制，模块访问性处理</p><h3 id="过滤器-filter" tabindex="-1">过滤器 Filter <a class="header-anchor" href="#过滤器-filter" aria-label="Permalink to &quot;过滤器 Filter&quot;">​</a></h3><p>异常处理</p><h3 id="拦截器-interceptor" tabindex="-1">拦截器 Interceptor <a class="header-anchor" href="#拦截器-interceptor" aria-label="Permalink to &quot;拦截器 Interceptor&quot;">​</a></h3><p>拦截器偏请求到服务器路由中间的过程，中间件是服务器在处理中间的过程</p><h2 id="复杂业务系统-持久化后端设计" tabindex="-1">复杂业务系统，持久化后端设计 <a class="header-anchor" href="#复杂业务系统-持久化后端设计" aria-label="Permalink to &quot;复杂业务系统，持久化后端设计&quot;">​</a></h2><p>核心目标</p><ul><li>高可用：系统稳定性</li><li>高性能：高并发</li><li>扩展性</li><li>可维护性</li><li>数据安全</li></ul><p>关键性设计问题</p><ul><li>缓存，数据缓存，redis</li><li>数据库，关系型（mysql\\postgresql）、非关系型(mongodb)</li><li>日志数据库，数据量太大，log4j, clickhous 列式存储数据库</li></ul><h3 id="数据持久化选型" tabindex="-1">数据持久化选型 <a class="header-anchor" href="#数据持久化选型" aria-label="Permalink to &quot;数据持久化选型&quot;">​</a></h3><ul><li>常规数据postgresql</li><li>秒杀、用户、聊天过程数据redis缓存</li><li>clickhouse 用户埋点数据、性能监控日志、用户行为日志（Hadoop,Hbase）</li><li>Kafka，消息队列，削峰</li></ul><h3 id="高并发" tabindex="-1">高并发 <a class="header-anchor" href="#高并发" aria-label="Permalink to &quot;高并发&quot;">​</a></h3><p>微服务架构</p>',30)]))}const b=a(t,[["render",o]]);export{u as __pageData,b as default};
