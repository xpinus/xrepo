import{a3 as i,t as s,ao as e,q as t}from"./chunks/framework.Dt9YBBJv.js";const c=JSON.parse('{"title":"前端异常处理","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge-lib/js/场景应用/前端异常及降级处理.md","filePath":"knowledge-lib/js/场景应用/前端异常及降级处理.md"}'),n={name:"knowledge-lib/js/场景应用/前端异常及降级处理.md"};function l(r,a,h,o,p,d){return t(),s("div",null,a[0]||(a[0]=[e(`<h1 id="前端异常处理" tabindex="-1">前端异常处理 <a class="header-anchor" href="#前端异常处理" aria-label="Permalink to &quot;前端异常处理&quot;">​</a></h1><p><a href="https://juejin.cn/post/6979564690787532814" target="_blank" rel="noreferrer">浅析前端异常及降级处理</a></p><h2 id="js" tabindex="-1">js <a class="header-anchor" href="#js" aria-label="Permalink to &quot;js&quot;">​</a></h2><p>js执行代码过程中出错，会使当前<strong>执行环境</strong>下后续代码不执行</p><ul><li>try catch finally</li><li>Promise.catch</li><li>unhandledrejection事件：当Promise被 reject 且没有 reject 处理器的时候，会触发</li><li>window.onerror 当 JS 运行时错误发生时，window会触发一个ErrorEvent接口的error事件，并执行 window.onerror() <ul><li>并不能捕获语法错误和静态资源的加载错误。同样也不能捕获异步代码的错误，但是有一点值得注意的是，window.onerror能捕获同样是异步代码的setTimeout和setInterval里面的错误</li></ul></li><li>window.addEventListener(&#39;error&#39;, (e) =&gt; {}) <ul><li>资源的加载错误</li><li>不能捕获语法错误，Promise异常和iframe异常</li></ul></li></ul><h2 id="react" tabindex="-1">React <a class="header-anchor" href="#react" aria-label="Permalink to &quot;React&quot;">​</a></h2><h2 id="vue" tabindex="-1">Vue <a class="header-anchor" href="#vue" aria-label="Permalink to &quot;Vue&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Vue.config.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">errorHandler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">vm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // handle error</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // \`info\` 是 Vue 特定的错误信息，比如错误所在的生命周期钩子</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 只在 2.2.0+ 可用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="http" tabindex="-1">HTTP <a class="header-anchor" href="#http" aria-label="Permalink to &quot;HTTP&quot;">​</a></h2><p>添加响应拦截器</p>`,10)]))}const u=i(n,[["render",l]]);export{c as __pageData,u as default};
