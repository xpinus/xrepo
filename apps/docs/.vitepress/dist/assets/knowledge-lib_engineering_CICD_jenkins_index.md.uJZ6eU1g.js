import{a2 as i,t as a,aq as n,q as e}from"./chunks/framework.jAttmLhR.js";const l="/assets/jenkins.DBxdwBSR.png",g=JSON.parse('{"title":"Jenkins","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge-lib/engineering/CICD/jenkins/index.md","filePath":"knowledge-lib/engineering/CICD/jenkins/index.md"}'),t={name:"knowledge-lib/engineering/CICD/jenkins/index.md"};function k(h,s,p,E,r,d){return e(),a("div",null,s[0]||(s[0]=[n('<h1 id="jenkins" tabindex="-1">Jenkins <a class="header-anchor" href="#jenkins" aria-label="Permalink to &quot;Jenkins&quot;">​</a></h1><p><img src="'+l+`" alt="logo"></p><p><a href="https://www.cnblogs.com/gltou/p/15329634.html" target="_blank" rel="noreferrer">Jenkins操作手册 - 巨详细，一篇足矣！</a></p><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><p><a href="https://developer.aliyun.com/article/892646" target="_blank" rel="noreferrer">https://developer.aliyun.com/article/892646</a></p><h3 id="安装并启动" tabindex="-1">安装并启动 <a class="header-anchor" href="#安装并启动" aria-label="Permalink to &quot;安装并启动&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jenkins</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8080:8080</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 50000:50000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/jenkins_home:/var/jenkins_home</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/run/docker.sock:/var/run/docker.sock</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/bin/docker:/usr/bin/docker</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/bin/docker-compose:/usr/bin/docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  jenkins/jenkins:lts</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --memory=4g</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 命令解释</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># docker run </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#   --name jenkins jenkins/jenkins:lts   # 启动后容器名 使用的镜像名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#   -u root      # 可选，指定容器内运行进程的用户，默认就是root</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#   --rm         # 可选，表示容器停止后会自动删除</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#   -d           # 容器在后台运行</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#   -p 8080:8080      # 端口映射   Jenkins 的 Web UI 默认会在 8080 端</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#   -p 50000:50000    # Jenkins 用这个端口与构建代理进行通信，通常是用于 Jenkins 代理节点与主节点之间的连接</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#   -v /var/jenkins_home:/var/jenkins_home   # Jenkins 的所有配置、插件、作业和数据都会存储在这个目录中</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#   -v /var/run/docker.sock:/var/run/docker.sock # 将宿主机的 Docker 套接字文件 /var/run/docker.sock 挂载到容器的 /var/run/docker.sock，这样 Jenkins 就可以通过宿主机的 Docker 来控制容器和镜像。这是为了让 Jenkins 可以在其构建过程中启动和管理 Docker 容器，通常用于 Jenkins Pipeline 中需要动态创建容器的场景</span></span></code></pre></div><h3 id="初始化jenkins" tabindex="-1">初始化Jenkins <a class="header-anchor" href="#初始化jenkins" aria-label="Permalink to &quot;初始化Jenkins&quot;">​</a></h3><p>安装完成后访问地址-&gt; http://{部署Jenkins所在服务IP}:8080</p><ol><li>镜像加速</li></ol><p><a href="https://blog.csdn.net/myhop/article/details/135388256#:~:text=%E6%9C%AC%E6%96%87%E8%AE%B2%E8%BF%B0%E4%BA%86%E5%9C%A8%E8%85%BE%E8%AE%AF%E4%BA%91%E7%8E%AF%E5%A2%83%E4%B8%8B%E4%BD%BF%E7%94%A8Jenkins%E5%AE%B9%E5%99%A8%E6%97%B6%E9%81%87%E5%88%B0%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%AD%A5%E9%AA%A4%EF%BC%8C%E6%B6%89%E5%8F%8A%E4%BF%AE%E6%94%B9%E5%8D%87%E7%BA%A7%E7%AB%99%E7%82%B9%E7%9A%84URL%E4%BB%8E%E9%BB%98%E8%AE%A4%E6%BA%90%E5%88%87%E6%8D%A2%E5%88%B0%E6%97%A5%E6%9C%ACesuni.jp%E9%95%9C%E5%83%8F%E7%AB%99%E4%BB%A5%E9%81%BF%E5%85%8D%E5%AE%89%E8%A3%85%E9%94%99%E8%AF%AF%E3%80%82%20%E8%85%BE%E8%AE%AF%E4%BA%91%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85%20Jenkins%20%E5%AE%B9%E5%99%A8%E4%BC%9A%E5%87%BA%E7%8E%B0%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6%E6%8A%A5%E9%94%99%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%8C,%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%E4%B8%BAJenkins%20%E6%9B%B4%E6%8D%A2%E6%BA%90%EF%BC%9A%201%E3%80%81%E7%82%B9%E5%87%BBJenkins%E4%B8%BB%E9%A1%B5%E9%9D%A2%E5%B7%A6%E4%BE%A7%E5%88%97%E8%A1%A8%E4%B8%AD%E3%80%90%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86%E3%80%91%202%E3%80%81%E4%B8%8B%E6%8B%89%E6%89%BE%E5%88%B0%E3%80%90%E7%AE%A1%E7%90%86%E6%8F%92%E4%BB%B6%E3%80%91%203%E3%80%81%E9%80%89%E6%8B%A9%E3%80%90%E9%AB%98%E7%BA%A7%E3%80%91%E9%80%89%E9%A1%B9%E5%8D%A1" target="_blank" rel="noreferrer">看这个</a></p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vim</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/jenkins_home/hudson.model.UpdateCenter.xml</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 也可以在登录 Jenkins 后在插件的高级设置里进行配置镜像加速</span></span></code></pre></div><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;?</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">xml</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1.1&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> encoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;UTF-8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sites</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">site</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;default&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    &lt;!-- &lt;url&gt;https://updates.jenkins.io/update-center.json&lt;/url&gt;--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">site</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sites</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ol start="2"><li>解锁，查看密码：<code>cat /var/jenkins_home/secrets/initialAdminPassword</code></li><li>安装插件 安装推荐的插件</li><li>创建管理员用户</li></ol><h3 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h3><ol><li><p>安装需要的插件，进入【首页】–【系统管理】–【插件管理】–【可选插件】</p></li><li><p>配置Maven 进入【首页】–【系统管理】–【全局配置】，拉到最下面maven–maven安装</p></li></ol><h3 id="创建任务" tabindex="-1">创建任务 <a class="header-anchor" href="#创建任务" aria-label="Permalink to &quot;创建任务&quot;">​</a></h3><p><a href="https://juejin.cn/post/6844903992481284104" target="_blank" rel="noreferrer">https://juejin.cn/post/6844903992481284104</a></p><ol><li>新建任务 点击【新建任务】，输入任务名称，点击构建一个自由风格的软件项目</li><li>点击【源码管理】–【Git】，输入仓库地址，添加凭证，选择好凭证即可。</li><li>点击【构建触发器】–【构建】–【增加构建步骤】–【调用顶层Maven目标】–【填写配置】–【保存】</li><li>保存</li></ol><h3 id="测试" tabindex="-1">测试 <a class="header-anchor" href="#测试" aria-label="Permalink to &quot;测试&quot;">​</a></h3><p>该功能测试是否能正常打包</p><ol><li><p>构建 点击构建按钮</p></li><li><p>查看日志 点击正在构建的任务，或者点击任务名称，进入详情页面，查看控制台输出，看是否能成功打成jar包。 该处日志第一次可能下载依赖jar包失败，再次点击构建即可成功。</p></li><li><p>查看项目位置 cd /var/jenkins_home/workspace ll 即可查看是否存在</p></li></ol><h3 id="运行项目" tabindex="-1">运行项目 <a class="header-anchor" href="#运行项目" aria-label="Permalink to &quot;运行项目&quot;">​</a></h3><p>因为我们项目和jenkins在同一台服务器，所以我们用shell脚本运行项目，原理既是通过dockerfile 打包镜像，然后docker运行即可。</p><ol><li><p>Dockerfile 在springboot项目根目录新建一个名为Dockerfile的文件，注意没有后缀名，其内容如下:（大致就是使用jdk8，把jar包添加到docker然后运行prd配置文件。详细可以查看其他教程）</p></li><li><p>修改jenkins任务配置 构建环境 - 增加构建器：执行shell</p></li><li><p>保存并构建</p></li><li><p>验证 docker ps 查看是否有自己的容器 docker logs 自己的容器名 查看日志是否正确 浏览器访问项目试一试</p></li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">echo $PATH</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NODE_OPTIONS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;--max-old-space-size=4096&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm config set registry </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">https</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//registry.npmmirror.com</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pnpm config set registry </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">https</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//registry.npmmirror.com</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pnpm install</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pnpm run </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:build</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">docker</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose up </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span></span></code></pre></div>`,26)]))}const c=i(t,[["render",k]]);export{g as __pageData,c as default};
