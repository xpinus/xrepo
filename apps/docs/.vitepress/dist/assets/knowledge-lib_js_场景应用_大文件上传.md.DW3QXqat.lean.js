import{a3 as e,t as l,ao as i,q as r}from"./chunks/framework.Dt9YBBJv.js";const b=JSON.parse('{"title":"文件上传","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge-lib/js/场景应用/大文件上传.md","filePath":"knowledge-lib/js/场景应用/大文件上传.md"}'),t={name:"knowledge-lib/js/场景应用/大文件上传.md"};function o(n,a,d,s,c,h){return r(),l("div",null,a[0]||(a[0]=[i('<h1 id="文件上传" tabindex="-1">文件上传 <a class="header-anchor" href="#文件上传" aria-label="Permalink to &quot;文件上传&quot;">​</a></h1><p><a href="https://www.bilibili.com/video/BV1or421L7fc/?spm_id_from=333.1387.0.0&amp;vd_source=13577946ef3878abe2197cc65b72005c" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1or421L7fc/?spm_id_from=333.1387.0.0&amp;vd_source=13577946ef3878abe2197cc65b72005c</a></p><h2 id="文件上传的消息格式" tabindex="-1">文件上传的消息格式 <a class="header-anchor" href="#文件上传的消息格式" aria-label="Permalink to &quot;文件上传的消息格式&quot;">​</a></h2><blockquote><p>本质上就是一个数据提交</p></blockquote><ul><li>一般使用POST请求</li><li>content-type一般使用multipart/form-data <ul><li>请求体被boundary定界符分割，每一块是一个键值对</li></ul></li></ul><h2 id="说说大文件上传" tabindex="-1">说说大文件上传 <a class="header-anchor" href="#说说大文件上传" aria-label="Permalink to &quot;说说大文件上传&quot;">​</a></h2><p>断点续传 断开重连重传 切片上传 文件校验</p><h2 id="方案" tabindex="-1">方案 <a class="header-anchor" href="#方案" aria-label="Permalink to &quot;方案&quot;">​</a></h2><ul><li>切断切片 chunk 1024M 500k</li><li>上传切片：切片取名：hash index</li><li>后端合并切片</li></ul><p>加料：</p><ul><li>前端切片：主进程做卡断，web-worker多线程切片，处理后交给主进程</li><li>切完后：将切片的blob存储到indexDB，下次用户进来后，嗅探一下是否存在未完成的切片，有就尝试继续上穿</li><li>websocket实时通知，和请求序列的控制 wss</li></ul><h2 id="断点续传" tabindex="-1">断点续传 <a class="header-anchor" href="#断点续传" aria-label="Permalink to &quot;断点续传&quot;">​</a></h2><p>在做分片上传的时候如果用户刷新了页面，这时候后端可以返回当前的上传进度，前端可以从这个进度上传下一个分片。 但是页面刷新之后前端的源文件会丢失，用户就需要重新点击上传并选择源文件。有没有一种自动化的方法可以自动读取源文件</p><p>可以将源文件存到本地indexedDB，刷新后从indexedDB取到文件分片继续上传。</p><h3 id="下载" tabindex="-1">下载 <a class="header-anchor" href="#下载" aria-label="Permalink to &quot;下载&quot;">​</a></h3><h3 id="上传" tabindex="-1">上传 <a class="header-anchor" href="#上传" aria-label="Permalink to &quot;上传&quot;">​</a></h3>',16)]))}const p=e(t,[["render",o]]);export{b as __pageData,p as default};
