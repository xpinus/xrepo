import{a2 as i,t as a,aq as n,q as e}from"./chunks/framework.jAttmLhR.js";const o=JSON.parse('{"title":"依赖优化配置选项","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge-lib/engineering/构建/vite/配置/依赖优化配置.md","filePath":"knowledge-lib/engineering/构建/vite/配置/依赖优化配置.md"}'),l={name:"knowledge-lib/engineering/构建/vite/配置/依赖优化配置.md"};function t(p,s,h,k,d,E){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="依赖优化配置选项" tabindex="-1">依赖优化配置选项 <a class="header-anchor" href="#依赖优化配置选项" aria-label="Permalink to &quot;依赖优化配置选项&quot;">​</a></h1><blockquote><p>针对依赖预打包做一些配置，比如可以新增包或者排除包</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  optimizeDeps: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 其他的配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="entries" tabindex="-1">entries <a class="header-anchor" href="#entries" aria-label="Permalink to &quot;entries&quot;">​</a></h2><blockquote><p>指定优化的入口文件</p></blockquote><ul><li>默认情况下，Vite 会抓取 index.html 来检测需要预构建的依赖项（忽略node_modules、build.outDir、<em>tests</em> 和 coverage）。如果指定了 build.rollupOptions.input，Vite 将转而去抓取这些入口点。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  optimizeDeps: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    entries: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;src/main.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;src/admin.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 显式指定入口文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    entries: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;src/**/*.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 glob 模式匹配所有 JS 文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    entries: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;src/**/*.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,              </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 匹配所有 JS 文件</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;!src/experimental/**/*.js&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 但忽略 experimental 目录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="exclude" tabindex="-1">exclude <a class="header-anchor" href="#exclude" aria-label="Permalink to &quot;exclude&quot;">​</a></h2><blockquote><p>在预构建中强制排除的依赖项</p></blockquote><h2 id="include" tabindex="-1">include <a class="header-anchor" href="#include" aria-label="Permalink to &quot;include&quot;">​</a></h2><blockquote><p>在预构建中强制包含的依赖项</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  optimizeDeps: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    include: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my-lib/components/**/*.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="esbuildoptions" tabindex="-1">esbuildOptions <a class="header-anchor" href="#esbuildoptions" aria-label="Permalink to &quot;esbuildOptions&quot;">​</a></h2><blockquote><p>在部署扫描和优化过程中传递给 esbuild 的选项</p></blockquote><ul><li>它只会影响 Vite 在启动时优化第三方依赖</li><li>全局的 esbuild 配置则影响 Vite 构建的整体过程，包括源码、依赖和输出等</li><li>在大多数情况下，Vite 的默认设置已经足够高效。然而，有时可能需要对 esbuild 的行为进行特定的调整，例如，更改源映射生成、定义宏替换等，以适应特定的项目需求或解决兼容性问题。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  optimizeDeps: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    esbuildOptions: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      sourcemap: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;inline&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将源映射直接嵌入到输出文件中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      define: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;process.env.NODE_ENV&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&quot;production&quot;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;__VERSION__&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&quot;1.0.0&quot;&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 宏替换</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // esbuild在对依赖进行预构建的时候，会将其编译为ES2015兼容的代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      target: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;es2015&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="force" tabindex="-1">force <a class="header-anchor" href="#force" aria-label="Permalink to &quot;force&quot;">​</a></h2><blockquote><p>设置为 true 可以强制依赖预构建，而忽略之前已经缓存过的、已经优化过的依赖</p></blockquote>`,18)]))}const c=i(l,[["render",t]]);export{o as __pageData,c as default};
