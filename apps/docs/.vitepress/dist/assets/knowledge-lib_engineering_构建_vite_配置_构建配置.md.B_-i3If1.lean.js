import{a2 as i,t as a,ao as n,q as l}from"./chunks/framework.tQiMsDJj.js";const E=JSON.parse('{"title":"构建配置选项","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge-lib/engineering/构建/vite/配置/构建配置.md","filePath":"knowledge-lib/engineering/构建/vite/配置/构建配置.md"}'),e={name:"knowledge-lib/engineering/构建/vite/配置/构建配置.md"};function t(p,s,h,k,r,o){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="构建配置选项" tabindex="-1">构建配置选项 <a class="header-anchor" href="#构建配置选项" aria-label="Permalink to &quot;构建配置选项&quot;">​</a></h1><blockquote><p>构建生产版本时候的配置，输出目录、压缩、CSS代码拆分....</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  build: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 构建相关的配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="target" tabindex="-1">target <a class="header-anchor" href="#target" aria-label="Permalink to &quot;target&quot;">​</a></h2><blockquote><p>指定构建产物的 JS 版本和浏览器兼容性。</p></blockquote><ul><li>默认设置：Edge 88+ Firefox 78+ Chrome 87+ Safari 14+</li><li>指定ES版本：<code>target: &#39;es2015&#39;</code></li><li>支持特定浏览器版本: <code>target: &#39;chrome58&#39;</code></li><li>多种配置：<code>target: [&#39;es2020&#39;, &#39;chrome87&#39;, &#39;firefox78&#39;]</code></li><li>注意： <ul><li>esbuild 虽然很快，但可能不支持某些复杂的或尚未广泛采用的 JS 特性。如果遇到了 esbuild 不支持的特性，那么需要Babel来做补充编译。</li><li>更改 build.target 会影响构建的输出大小和性能</li></ul></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// npm install @babel/core @babel/preset-env vite-plugin-babel --save-dev</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> babel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vite-plugin-babel&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    babel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      babelConfig: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        presets: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@babel/preset-env&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { targets: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&gt; 0.25%, not dead&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="polyfillmodulepreload" tabindex="-1">polyfillModulePreload <a class="header-anchor" href="#polyfillmodulepreload" aria-label="Permalink to &quot;polyfillModulePreload&quot;">​</a></h2><blockquote><p>用于决定是否自动注入 module preload 的 polyfill. polyfill预加载</p></blockquote><h2 id="outdir" tabindex="-1">outDir <a class="header-anchor" href="#outdir" aria-label="Permalink to &quot;outDir&quot;">​</a></h2><blockquote><p>指定输出目录 dist</p></blockquote><h2 id="assetsdir" tabindex="-1">assetsDir <a class="header-anchor" href="#assetsdir" aria-label="Permalink to &quot;assetsDir&quot;">​</a></h2><blockquote><p>指定生成静态资源的输出目录</p></blockquote><h2 id="assetsinlinelimit" tabindex="-1">assetsInlineLimit <a class="header-anchor" href="#assetsinlinelimit" aria-label="Permalink to &quot;assetsInlineLimit&quot;">​</a></h2><blockquote><p>小于此阈值的导入或引入的资源将内联为 base64 编码的数据 URI 默认<code>4kb</code>，设为零则关闭优化</p></blockquote><h2 id="csscodesplit" tabindex="-1">cssCodeSplit <a class="header-anchor" href="#csscodesplit" aria-label="Permalink to &quot;cssCodeSplit&quot;">​</a></h2><blockquote><p>启用/禁用 CSS 代码拆分。</p></blockquote><ul><li>当启用时，在异步 chunk 中导入的 CSS 将内联到异步 chunk 本身，并在其被加载时插入</li><li>如果禁用，整个项目中的所有 CSS 将被提取到一个 CSS 文件中</li></ul><h2 id="csstarget" tabindex="-1">cssTarget <a class="header-anchor" href="#csstarget" aria-label="Permalink to &quot;cssTarget&quot;">​</a></h2><blockquote><p>此选项允许用户为 CSS 的压缩设置一个不同的浏览器 target</p></blockquote><h2 id="cssminify" tabindex="-1">cssMinify <a class="header-anchor" href="#cssminify" aria-label="Permalink to &quot;cssMinify&quot;">​</a></h2><blockquote><p>允许你单独控制 CSS 文件的最小化压缩方式，独立于 JS 的压缩设置</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  build: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cssMinify: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;esbuild&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// CSS压缩使用esbuild, false 禁用css压缩</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    minify: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;terser&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // JS压缩使用 terser</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="sourcemap" tabindex="-1">sourcemap <a class="header-anchor" href="#sourcemap" aria-label="Permalink to &quot;sourcemap&quot;">​</a></h2><blockquote><p>构建后是否生成 source map 文件</p></blockquote><ul><li>如果为 true，将会创建一个独立的 source map 文件</li><li>如果为 &#39;inline&#39;，source map 将作为一个 data URI 附加在输出文件中</li><li>&#39;hidden&#39; 的工作原理与 true 相似，只是 bundle 文件中相应的注释将不被保留</li></ul><h2 id="rollupoptions" tabindex="-1">rollupOptions <a class="header-anchor" href="#rollupoptions" aria-label="Permalink to &quot;rollupOptions&quot;">​</a></h2><blockquote><p>传递给 Rollup 的选项</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@rollup/plugin-image&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 假设这是一个用于处理图像的 Rollup 插件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 添加一个 rollup 插件来处理图像</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 指定 some-external-lib 为外部依赖</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 为这个外部依赖提供一个可访问的全局变量 SomeExternalLib</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  build: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rollupOptions: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      plugins:[</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        images</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 通过这个rollup插件来处理图像</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      external: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;some-external-lib&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 指定some-external-lib为外部依赖，不会被打包进去</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      output: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      	globals: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      		&#39;some-external-lib&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;SomeExternalLib&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p><strong>控制打包结果的目录结构和分包</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    build: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        rollupOptions: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            output: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                entryFileNames: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;js/[name]-[hash].js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                chunkFileNames: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;js/[name]-[hash].js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                /*assetFileNames: &#39;[ext]/[name]-[hash].[ext]&#39;,*/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                assetFileNames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">assetInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> assetInfo.name;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">endsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.css&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;css/[name]-[hash].css&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;assets/[name]-[hash].[ext]&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                manualChunks:{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                    &#39;vue-vendor&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;vue-router&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="commonjsoptions" tabindex="-1">commonjsOptions <a class="header-anchor" href="#commonjsoptions" aria-label="Permalink to &quot;commonjsOptions&quot;">​</a></h2><blockquote><p>传递给 @rollup/plugin-commonjs 插件的选项 - 用于将Commonjs模块转换为ES6模块 ？ 原理</p></blockquote><h2 id="lib" tabindex="-1">lib <a class="header-anchor" href="#lib" aria-label="Permalink to &quot;lib&quot;">​</a></h2><blockquote><p>将应用打包成一个依赖库，方便其他应用来使用</p></blockquote><ul><li>entry: 指定入口文件通常是js, 因为库不能使用 HTML 作为入口</li><li>formats: 指定生成的库格式</li><li>fileName: 指定输出文件名, 默认 fileName 是 package.json 的 name 选项</li><li>name: 暴露的全局变量，在 formats 包含 &#39;umd&#39; 或 &#39;iife&#39; 时是必须的</li></ul><h2 id="manifest" tabindex="-1">manifest <a class="header-anchor" href="#manifest" aria-label="Permalink to &quot;manifest&quot;">​</a></h2><blockquote><p>生成 manifest.json 文件, 包含关于打包输出内容的元数据的文件</p></blockquote><ul><li>包含了没有被 hash 过的资源文件名和 hash 后版本的映射</li><li>使用服务端渲染（SSR）\\ 需要动态引用打包后的文件（例如，通过路径映射来确保引用的文件正确）\\ 使用了代码分割、按需加载等高级特性，需要根据 manifest.json 来优化资源加载</li></ul><h2 id="ssr" tabindex="-1">ssr <a class="header-anchor" href="#ssr" aria-label="Permalink to &quot;ssr&quot;">​</a></h2><blockquote><p>生成面向 SSR 的构建</p></blockquote><h2 id="minify" tabindex="-1">minify <a class="header-anchor" href="#minify" aria-label="Permalink to &quot;minify&quot;">​</a></h2><blockquote><p>最小化混淆，用于控制构建过程中的 JS 代码压缩和混淆 <strong>默认为 Esbuild</strong></p></blockquote><h2 id="terseroptions" tabindex="-1">terserOptions <a class="header-anchor" href="#terseroptions" aria-label="Permalink to &quot;terserOptions&quot;">​</a></h2><blockquote><p>传递给 Terser 的选项</p></blockquote><h2 id="write" tabindex="-1">write <a class="header-anchor" href="#write" aria-label="Permalink to &quot;write&quot;">​</a></h2><blockquote><p>设置为 false 来禁用将构建后的文件写入磁盘。这常用于 编程式地调用 build() 在写入磁盘之前，需要对构建后的文件进行进一步处理</p></blockquote><h2 id="emptyoutdir" tabindex="-1">emptyOutDir <a class="header-anchor" href="#emptyoutdir" aria-label="Permalink to &quot;emptyOutDir&quot;">​</a></h2><blockquote><p>设置为 false 来禁用在构建前清空输出目录，默认为 true</p></blockquote><h2 id="reportcompressedsize" tabindex="-1">reportCompressedSize <a class="header-anchor" href="#reportcompressedsize" aria-label="Permalink to &quot;reportCompressedSize&quot;">​</a></h2><blockquote><p>启用/禁用 gzip 压缩大小报告</p></blockquote><ul><li>压缩大型输出文件可能会很慢，因此禁用该功能可能会提高大型项目的构建性能</li></ul><h2 id="chunksizewarninglimit" tabindex="-1">chunkSizeWarningLimit <a class="header-anchor" href="#chunksizewarninglimit" aria-label="Permalink to &quot;chunkSizeWarningLimit&quot;">​</a></h2><blockquote><p>设置以字节为单位的文件大小阈值，超过该阈值的 chunk 会发出警告</p></blockquote><h2 id="watch" tabindex="-1">watch <a class="header-anchor" href="#watch" aria-label="Permalink to &quot;watch&quot;">​</a></h2><blockquote><p>设置为 {} 则会启用 rollup 的监听器。对于只在构建阶段或者集成流程使用的插件很常用</p></blockquote>`,56)]))}const c=i(e,[["render",t]]);export{E as __pageData,c as default};
